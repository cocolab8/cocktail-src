PARSER

/* $Id: lark.pars,v 1.11 2001/08/08 15:01:15 grosch rel $ */

/*
 * $Log: lark.pars,v $
 * Revision 1.11  2001/08/08 15:01:15  grosch
 * added and revised support for #line directives
 *
 * Revision 1.10  2000/09/12 17:50:13  grosch
 * moved the default of some target code sections to skeletons
 *
 * Revision 1.9  1999/12/01 11:27:17  grosch
 * added generation of Java
 *
 * Revision 1.8  1999/11/11 11:29:41  grosch
 * bug fix: wrong order of rules caused crash in generation of examples
 * bug fix in processing of selector names in case rules begin with action
 *
 * Revision 1.7  1998/04/21 13:03:16  grosch
 * truncation of file and module names to 8.3 format
 *
 * Revision 1.6  1994/11/13  12:46:14  grosch
 * changed initialization of EXPORT and GLOBAL sections
 * allow declarations in any order and check for multiple occurrences
 *
 * Revision 1.5  1994/10/18  12:45:48  grosch
 * added checks for multiple occurrences of target code sections
 *
 * Revision 1.4  1994/09/13  12:52:19  grosch
 * added generation of Ada code
 *
 * Revision 1.3  1994/08/30  12:12:40  grosch
 * added negation of predicates
 * added check: costs have to be > 0
 *
 * Revision 1.2  1994/03/23  15:09:56  grosch
 * allow several start symbols
 * accept Yacc input as well as Lark input
 *
 * Revision 1.1  1994/03/17  22:23:08  grosch
 * added generation of C++
 * added cost and repr specs for terminals
 *
 * Revision 1.0  1994/02/01  14:05:52  grosch
 * Initial revision
 *
 */

/* Ich, Doktor Josef Grosch, Informatiker, 25.1.1993 */

EXPORT {
FROM Idents	IMPORT tIdent;

PROCEDURE Encode (Ident: tIdent): INTEGER;
}

GLOBAL {

FROM Position	IMPORT tPosition, NoPosition;
FROM Strings	IMPORT tString, ArrayToString, Append, Concatenate, Char, Length;
FROM Idents	IMPORT tIdent, NoIdent, MakeIdent, GetString;
FROM Texts	IMPORT tText, MakeText;
FROM Errors	IMPORT Message, Long, Error;

FROM Tree	IMPORT
   mNoRule	, mRule		, mPrec		, mUCAction	,
   mNoElement	, mIdent	, mAction	, mGrammar	,
   mNoTerminal	, mTerminal	, mNoNonterminal, mNonterminal	,
   mNoPrecedence, mLeft		, mRight	, mNone		,
   mTag		, Tags		, ErrorCount	,
   Import	, Export	, Global	, Local		, Begin		, Close		,
   ImportPos	, ExportPos	, GlobalPos	, LocalPos	, BeginPos	, ClosePos	,
   tTree	, ReverseTree	, TreeRoot	, mILCheck	, mILTrialParse	,
   ScannerPackageName	, ScannerName	, ParserPackageName	,
   ParserName	,
   NoAssoc	, String	, Reachable	, Language	,
   tLanguage	, DefaultCost	, NoTree	;

IMPORT Texts;

VAR
   string	: tString;
   RulePos	: tPosition;
   NoAction	: tText;
   Tag		: tIdent;
   nNoElement, nNoNonterminal, nNoPrecedence, nNoRule, nNoTerminal: tTree;
   Terminals, Precedences, Precedence, Starts, Elmt: tTree;
   Name		: tIdent;
   tmpString1, tmpString2: tString;
   PackageName	: tIdent;

PROCEDURE Encode (Ident: tIdent): INTEGER;
   VAR
      i, n	: CARDINAL;
      c		: CHAR;
      string	: tString;

   PROCEDURE CheckCode (c: INTEGER): INTEGER;
      BEGIN
	 IF Length (string) = 4 THEN RETURN c; ELSE RETURN -1; END;
      END CheckCode;

   BEGIN
      GetString (Ident, string);
      IF Char (string, 2) = '\' THEN
	 CASE Char (string, 3) OF
	 | 'n': RETURN CheckCode (10);
	 | 't': RETURN CheckCode ( 9);
	 | 'v': RETURN CheckCode (11);
	 | 'b': RETURN CheckCode ( 8);
	 | 'r': RETURN CheckCode (13);
	 | 'f': RETURN CheckCode (12);
	 | '0' .. '7':
		i := 3;
		n := 0;
		LOOP
		   c := Char (string, i);
		   IF (c < '0') OR ('7' < c) THEN EXIT; END;
		   n := n * 8 + ORD (c) - ORD ('0');
		   INC (i);
		END;
		IF i = Length (string) THEN RETURN n ELSE RETURN -1; END;
	 ELSE
	    RETURN CheckCode (ORD (Char (string, 3)));
	 END;
      ELSIF Length (string) = 3 THEN
	 RETURN ORD (Char (string, 2));
      ELSE
	 RETURN -1;
      END;
   END Encode;

PROCEDURE DefineTag (Ident: tIdent);
   BEGIN
      IF Tag # NoIdent THEN Tags := mTag (Tags, Ident, Tag); END;
   END DefineTag;

PROCEDURE ErrorMessage (Text: ARRAY OF CHAR; Pos: tPosition);
   BEGIN
      Message (Text, Error, Pos);
      INC (ErrorCount);
   END ErrorMessage;

PROCEDURE CheckId (Ident: tIdent; Position: tPosition);
   BEGIN
      IF Ident # NoIdent THEN ErrorMessage ("name already defined", Position); END;
   END CheckId;

PROCEDURE Check (VAR CodePos: tPosition; Position: tPosition);
   BEGIN
      IF CodePos.Line # 0 THEN ErrorMessage ("code section already defined", Position); END;
      CodePos := Position;
   END Check;

PROCEDURE CheckNode (Node, Default: tTree; Position: tPosition);
   BEGIN
      IF Node # Default THEN ErrorMessage ("item already defined", Position); END;
   END CheckNode;
}

BEGIN {
   MakeText (NoAction);
   nNoElement		:= mNoElement	  ();
   nNoNonterminal	:= mNoNonterminal ();
   nNoPrecedence	:= mNoPrecedence  ();
   nNoRule		:= mNoRule	  ();
   nNoTerminal		:= mNoTerminal	  ();
   Terminals		:= nNoTerminal	;
   Precedences		:= nNoPrecedence;
   Starts		:= nNoElement	;
   Tags			:= NoTree	;
   ParserPackageName	:= NoIdent	;
   ScannerName		:= NoIdent	;
   ParserName		:= NoIdent	;
   TreeRoot		:= mGrammar (nNoTerminal, nNoPrecedence, nNoElement, NoTree, nNoNonterminal);
}

DECLARE
   Tokens	= -> [Tree: tTree] .
   Token	= -> [Ident: tIdent SYN] [Position: tPosition SYN] [Properties: BITSET] .
   Code		= -> [Value: INTEGER] .
   Cost
   Repr		= -> [Value: CARDINAL] [Ident: tIdent SYN] .
   Precedences	= -> [Tree: tTree] .
   Terminals	= -> [Tree: tTree] .
   Nonterminals	= -> [Tree: tTree] .
   Productions	= -> [Tree: tTree] .
   Rules	= -> [Tree: tTree] .
   Elements	= -> [Tree: tTree] .
   rules	= -> [Tree: tTree] .
   rhs_s	= -> [Tree: tTree] .
   rhs		= -> [Tree: tTree] .
   rbody	= -> [Tree: tTree] .
   prec		= -> [Tree: tTree] .

RULE

Grammar		= <
   Lark		= Decls RulePart .

   Yacc		= defs '%%' rules tail
		  { => { TreeRoot := mGrammar  (ReverseTree (Terminals	),
						ReverseTree (Precedences),
						Starts,
						ReverseTree (rules:Tree	),
						nNoNonterminal); }; } .
> .

/* Lark */

Decls		= <
		= .
		= Decls ScannerName .
		= Decls ParserName .
		= Decls Codes .
		= Decls TokenPart .
		= Decls PrecPart .
		= Decls StartPart .
> .
ScannerName	= <
		= 'SCANNER'
		  { => { CheckId (ScannerName, 'SCANNER':Position);
			 ArrayToString ("Scanner", string);
			 ScannerName := MakeIdent (string); }; } .

		= 'SCANNER' DottedIdentifier
		  { => { IF (Language # Java) AND (PackageName # NoIdent) THEN
			    Message ("dotted scanner name only allowed when generating java code", Error, 'SCANNER':Position);
			 END;
			 CheckId (ScannerName, 'SCANNER':Position);
			 ScannerPackageName	:= PackageName;
			 ScannerName		:= Name; }; } .
> .
ParserName	= <
		= 'PARSER'
		  { => { CheckId (ParserName, 'PARSER':Position);
			 ArrayToString ("Parser", string);
			 ParserName  := MakeIdent (string); }; } .

		= 'PARSER' DottedIdentifier
		  { => { IF (Language # Java) AND (PackageName # NoIdent) THEN
			    Message ("dotted parser name only allowed when generating java code", Error, 'PARSER':Position);
			 END;
			 CheckId (ParserName, 'PARSER':Position);
			 ParserPackageName	:= PackageName;
			 ParserName		:= Name; }; } .
> .
DottedIdentifier= [Ident: tIdent] <
		= DottedIdentifier '.' Identifier
		  { => { GetString (DottedIdentifier:Ident, tmpString1);
			 Strings.Append (tmpString1, '.');
			 GetString (Identifier:Ident, tmpString2);
			 Strings.Concatenate (tmpString1, tmpString2);
			 PackageName	:= DottedIdentifier:Ident;
			 Name		:= Identifier:Ident;
			 Ident		:= MakeIdent (tmpString1); }; } .

		= Identifier
		  { => { PackageName	:= NoIdent;
			 Name		:= Identifier:Ident;
			 Ident		:= Identifier:Ident; }; } .
> .
Codes		= <
		= 'IMPORT' Action { => { Import	:= Action:Value;
				Check (ImportPos, Action:Position); }; } .
		= 'EXPORT' Action { => { Export	:= Action:Value;
				Check (ExportPos, Action:Position); }; } .
		= 'GLOBAL' Action { => { Global	:= Action:Value;
				Check (GlobalPos, Action:Position); }; } .
		= 'LOCAL'  Action { => { Local	:= Action:Value;
				Check (LocalPos , Action:Position); }; } .
		= 'BEGIN'  Action { => { Begin	:= Action:Value;
				Check (BeginPos , Action:Position); }; } .
		= 'CLOSE'  Action { => { Close	:= Action:Value;
				Check (ClosePos , Action:Position); }; } .
> .
TokenPart	= 'TOKEN' Tokens
		  { => { CheckNode (TreeRoot^.Grammar.Terminals, nNoTerminal, 'TOKEN':Position);
			 TreeRoot^.Grammar.Terminals := ReverseTree (Tokens:Tree); }; } .

Tokens		= <
		=			{ Tree := nNoTerminal; } .
		= Tokens Token Code Cost{ Tree := mTerminal (Tokens:Tree,
					Token:Ident, Token:Position, Code:Value, 0,
					NoAssoc, Token:Properties, Cost:Value,
					Cost:Ident);	} .
		= Tokens Token Code Repr{ Tree := mTerminal (Tokens:Tree,
					Token:Ident, Token:Position, Code:Value, 0,
					NoAssoc, Token:Properties, Repr:Value,
					Repr:Ident);	} .
> .
Token		= <
		= Identifier		{ Properties := \{\};		} .
		= String		{ Properties := \{\String\};	} .
> .
Code		= <
		=			{ Value := -1;			} .
		= Number .
		= '=' Number .
> .
Cost		= <
		=			{ Value := DefaultCost; Ident := NoIdent;} .
		= ',' Number		{ Ident := NoIdent;
					  CHECK Value > 0 =>
			ErrorMessage ("costs have to be > 0", Number:Position); } .
		= ',' Number ',' String	{ CHECK Value > 0 =>
			ErrorMessage ("costs have to be > 0", Number:Position); } .
> .
Repr		= <
		= ',' String		{ Value := DefaultCost;		} .
		= ',' String ',' Number	{ CHECK Value > 0 =>
			ErrorMessage ("costs have to be > 0", Number:Position); } .
> .
PrecPart	= 'PREC' Precedences
		  { => { CheckNode (TreeRoot^.Grammar.\Precedences, nNoPrecedence, 'PREC':Position);
			 TreeRoot^.Grammar.\Precedences := ReverseTree (Precedences:Tree); }; } .

Precedences	= <
		= { Tree := nNoPrecedence; } .
		= Precedences 'LEFT'  Terminals
		  { Tree := mLeft  (Precedences:Tree, ReverseTree (Terminals:Tree)); } .
		= Precedences 'RIGHT' Terminals
		  { Tree := mRight (Precedences:Tree, ReverseTree (Terminals:Tree)); } .
		= Precedences 'NONE'  Terminals
		  { Tree := mNone  (Precedences:Tree, ReverseTree (Terminals:Tree)); } .
> .
Terminals	= <
		= { Tree := nNoTerminal; } .
		= Terminals Identifier
		  { Tree := mTerminal (Terminals:Tree, Identifier:Ident, Identifier:Position, -1, 0, NoAssoc, \{\}, DefaultCost, NoIdent); } .
		= Terminals String
		  { Tree := mTerminal (Terminals:Tree, String:Ident, String:Position, -1, 0, NoAssoc, \{\String\}, DefaultCost, NoIdent); } .
> .
StartPart	= 'START' Nonterminals
		  { => { CheckNode (TreeRoot^.Grammar.Starts, nNoElement, 'START':Position);
			 TreeRoot^.Grammar.Starts := ReverseTree (Nonterminals:Tree); }; } .

Nonterminals	= <
		= { Tree := nNoElement; } .
		= Nonterminals Identifier
		  { Tree := mIdent (Nonterminals:Tree, Identifier:Ident,
			    Identifier:Position, NoIdent, NoPosition); } .
		= Nonterminals Identifier ','
		  { Tree := mIdent (Nonterminals:Tree, Identifier:Ident,
			    Identifier:Position, NoIdent, NoPosition); } .
> .
RulePart	= 'RULE' Productions
		  { => { TreeRoot^.Grammar.Rules := ReverseTree (Productions:Tree); }; } .

Productions	= <
		= Identifier colon Rules '.'
		  { Tree := mNonterminal (nNoNonterminal, Identifier:Ident,
			    Identifier:Position, ReverseTree (Rules:Tree), \{\}); } .
		= Productions Identifier colon Rules '.'
		  { Tree := mNonterminal (Productions:Tree, Identifier:Ident,
			    Identifier:Position, ReverseTree (Rules:Tree), \{\}); } .
> .
Rules		= <
		= Elements
		  { Tree := mRule (nNoRule, Elements:Tree, NoIdent, NoPosition,
			    NoAction, NoPosition, NoAction, NoPosition, 0, NoAssoc,
			    RulePos);
		    => { Tree^.Rule.RuleOrig := Tree; }; } .
		= Rules '|' Elements
		  { Tree := mRule (Rules:Tree, Elements:Tree, NoIdent, NoPosition,
			    NoAction, NoPosition, NoAction, NoPosition, 0, NoAssoc,
			    '|':Position);
		    => { Tree^.Rule.RuleOrig := Tree; }; } .
> .
Elements	= <
		= { Tree := nNoElement; } .
		= Elements Identifier
		  { Tree := mIdent (Elements:Tree, Identifier:Ident, Identifier:Position,
			    NoIdent, NoPosition); } .
		= Elements Identifier '$' Selector:Identifier
		  { Tree := mIdent (Elements:Tree, Identifier:Ident, Identifier:Position,
			    Selector:Ident, Selector:Position); } .
		= Elements String
		  { Tree := mIdent (Elements:Tree, String:Ident, String:Position,
			    NoIdent, NoPosition); } .
		= Elements String '$' Selector:Identifier
		  { Tree := mIdent (Elements:Tree, String:Ident, String:Position,
			    Selector:Ident, Selector:Position); } .
		= Elements Action
		  { Tree := mAction (Elements:Tree, Action:Value, Action:Position,
			    NoIdent, NoPosition); } .
		= Elements Action '$' Selector:Identifier
		  { Tree := mAction (Elements:Tree, Action:Value, Action:Position,
			    Selector:Ident, Selector:Position); } .
		= Elements UCAction
		  { Tree := mUCAction (Elements:Tree, UCAction:Value, UCAction:Position,
			    NoIdent, NoPosition); } .
		= Elements UCAction '$' Selector:Identifier
		  { Tree := mUCAction (Elements:Tree, UCAction:Value, UCAction:Position,
			    Selector:Ident, Selector:Position); } .
		= Elements 'PREC' Identifier
		  { Tree := mPrec (Elements:Tree, Identifier:Ident, Identifier:Position); } .
		= Elements 'PREC' String
		  { Tree := mPrec (Elements:Tree, String:Ident, String:Position); } .
		= Elements '?' Action
		  { Tree := mILCheck (Elements:Tree, Action:Value, Action:Position, FALSE); } .
		= Elements '?' Identifier
		  { Tree := mILTrialParse (Elements:Tree, Identifier:Ident, Identifier:Position, FALSE); } .
		= Elements '?' String
		  { Tree := mILTrialParse (Elements:Tree, String:Ident, String:Position, FALSE); } .
		= Elements '?' '-' Action
		  { Tree := mILCheck (Elements:Tree, Action:Value, Action:Position, TRUE); } .
		= Elements '?' '-' Identifier
		  { Tree := mILTrialParse (Elements:Tree, Identifier:Ident, Identifier:Position, TRUE); } .
		= Elements '?' '-' String
		  { Tree := mILTrialParse (Elements:Tree, String:Ident, String:Position, TRUE); } .
> .

/* Yacc */

defs		= <
		= .
		= defs def .
> .
def		= <
		= '%start' nlist3 .
	     /* = '%union'  . */
	     /* = '%{' '%}' . */
		= '%token'		   tag nlist .
		= '%left'	reset_prec tag nlist1
		  { => { Precedences := mLeft  (Precedences, ReverseTree (Precedence)); }; } .
		= '%right'	reset_prec tag nlist1
		  { => { Precedences := mRight (Precedences, ReverseTree (Precedence)); }; } .
		= '%nonassoc'	reset_prec tag nlist1
		  { => { Precedences := mNone  (Precedences, ReverseTree (Precedence)); }; } .
		= '%type'		   tag2 nlist2 .
> .
reset_prec	= { => { Precedence := nNoTerminal; }; } .

tag		= <
		= { => { Tag := NoIdent; }; } .
   tag2		= '<' Identifier '>'
		  { => { Tag := Identifier:Ident; }; } .
> .
nlist		= <
		= nmno .
		= nlist nmno .
		= nlist ',' nmno .
> .
nmno		= <
		= Identifier
		  { => { Terminals := mTerminal (Terminals, Identifier:Ident,
			    Identifier:Position, -1, 0, NoAssoc,
			    {}, DefaultCost, NoIdent);
			 DefineTag (Identifier:Ident);			}; } .
		= Identifier Number
		  { => { Terminals := mTerminal (Terminals, Identifier:Ident,
			    Identifier:Position, Number:Value, 0, NoAssoc,
			    {}, DefaultCost, NoIdent);
			 DefineTag (Identifier:Ident);			}; } .
		= String
		  { => { Terminals := mTerminal (Terminals, String:Ident,
			    String:Position, Encode (String:Ident), 0, NoAssoc,
			    {\String}, DefaultCost, NoIdent);
			 DefineTag (String:Ident);			}; } .
		= String Number
		  { => { Terminals := mTerminal (Terminals, String:Ident,
			    String:Position, Number:Value, 0, NoAssoc,
			    {\String}, DefaultCost, NoIdent);
			 DefineTag (String:Ident);			}; } .
> .
nlist1		= <
		= nmno1 .
		= nlist1 nmno1 .
		= nlist1 ',' nmno1 .
> .
nmno1		= <
		= Identifier
		  { => { Precedence := mTerminal (Precedence, Identifier:Ident,
			    Identifier:Position, -1, 0, NoAssoc,
			    {}, DefaultCost, NoIdent);
			 DefineTag (Identifier:Ident);			}; } .
		= Identifier Number
		  { => { Precedence := mTerminal (Precedence, Identifier:Ident,
			    Identifier:Position, Number:Value, 0, NoAssoc,
			    {}, DefaultCost, NoIdent);
			 DefineTag (Identifier:Ident);			}; } .
		= String
		  { => { Precedence := mTerminal (Precedence, String:Ident,
			    String:Position, Encode (String:Ident), 0, NoAssoc,
			    {\String}, DefaultCost, NoIdent);
			 DefineTag (String:Ident);			}; } .
		= String Number
		  { => { Precedence := mTerminal (Precedence, String:Ident,
			    String:Position, Number:Value, 0, NoAssoc,
			    {\String}, DefaultCost, NoIdent);
			 DefineTag (String:Ident);			}; } .
> .
nlist2		= <
		= nm .
		= nlist2 nm .
		= nlist2 ',' nm .
> .
nm		= Identifier { => { DefineTag (Identifier:Ident); }; } .

nlist3		= <
		= nm3 .
		= nlist3 nm3 .
		= nlist3 ',' nm3 .
> .
nm3		= Identifier
		  { => { Starts := mIdent (Starts, Identifier:Ident,
			    Identifier:Position, NoIdent, NoPosition); }; } .

rules		= <
		= C_Identifier colon rhs_s
		  { Tree := mNonterminal (nNoNonterminal, C_Identifier:Ident,
			    C_Identifier:Position, ReverseTree (rhs_s:Tree), \{\}); } .
		= rules C_Identifier colon rhs_s
		  { Tree := mNonterminal (rules:Tree, C_Identifier:Ident,
			    C_Identifier:Position, ReverseTree (rhs_s:Tree), \{\}); } .
> .
colon		= ':' { => { RulePos := ':':Position; }; } .

rhs_s		= <
		= rhs
		  { Tree := mRule (nNoRule, rhs:Tree, NoIdent, NoPosition,
			    NoAction, NoPosition, NoAction, NoPosition, 0, NoAssoc,
			    RulePos);
		    => { Tree^.Rule.RuleOrig := Tree; }; } .
		= rhs_s '|' rhs
		  { Tree := mRule (rhs_s:Tree, rhs:Tree, NoIdent, NoPosition,
			    NoAction, NoPosition, NoAction, NoPosition, 0, NoAssoc,
			    '|':Position);
		    => { Tree^.Rule.RuleOrig := Tree; }; } .
> .
rhs		= rbody prec
		  { Tree := { Tree := rbody:Tree;
			      WHILE prec:Tree # NoTree DO
				 Elmt := prec:Tree;
				 prec:Tree := prec:Tree^.Element.Next;
				 Elmt^.Element.Next := Tree;
				 Tree := Elmt;
			      END; }; } .

rbody		= <
		= { Tree := nNoElement; } .
		= rbody Identifier
		  { Tree := mIdent (rbody:Tree, Identifier:Ident, Identifier:Position,
			    NoIdent, NoPosition); } .
		= rbody String
		  { Tree := mIdent (rbody:Tree, String:Ident, String:Position,
			    NoIdent, NoPosition); } .
		= rbody Action
		  { Tree := mAction (rbody:Tree, Action:Value, Action:Position,
			    NoIdent, NoPosition); } .
> .
prec		= <
		= { Tree := NoTree; } .
		= '%prec' Identifier
		  { Tree := mPrec (NoTree, Identifier:Ident, Identifier:Position); } .
		= '%prec' Identifier Action
		  { Tree := mPrec (mAction (NoTree, Action:Value, Action:Position,
					    NoIdent, NoPosition),
				   Identifier:Ident, Identifier:Position); } .
		= '%prec' String
		  { Tree := mPrec (NoTree, String:Ident, String:Position); } .
		= '%prec' String Action
		  { Tree := mPrec (mAction (NoTree, Action:Value, Action:Position,
					    NoIdent, NoPosition),
				   String:Ident, String:Position); } .
		= prec ';' .
> .
tail		= <
		= '%%' .
		= .
> .

Identifier	: [Ident: tIdent	] { Ident := NoIdent			; } .
C_Identifier	: [Ident: tIdent	] { Ident := NoIdent			; } .
String		: [Ident: tIdent	] { Ident := NoIdent			; } .
Number		: [Value: CARDINAL	] { Value := 0				; } .
Action		: [Value: tText		] { Value := { MakeText (Value); }	; } .
UCAction	: [Value: tText		] { Value := { MakeText (Value); }	; } .
