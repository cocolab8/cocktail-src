/* $Id: lark.scan,v 1.16 2008/09/25 14:50:35 grosch Exp $ */

/*
 * $Log: lark.scan,v $
 * Revision 1.16  2008/09/25 14:50:35  grosch
 * revised handling of #@ line directives
 * renamed AppendLine -> MakeDirective, WriteLine -> WriteDirective
 *
 * Revision 1.15  2006/11/09 15:17:02  grosch
 * improved some error messages
 *
 * Revision 1.14  2005/02/17 14:35:41  grosch
 * added comments for syntax coloring of vi
 *
 * Revision 1.13  2001/08/08 15:01:15  grosch
 * added and revised support for #line directives
 *
 * Revision 1.12  2000/09/14 15:44:47  grosch
 * reactivated error message for unclosed strings
 *
 * Revision 1.11  2000/09/12 17:50:52  grosch
 * checked in update for generation of Java from Trevor Nash
 *
 * Revision 1.10  2000/08/31 10:12:49  grosch
 * added C++ comments
 *
 * Revision 1.9  1999/12/01 11:27:17  grosch
 * added generation of Java
 *
 * Revision 1.8  1998/04/21 13:04:54  grosch
 * truncation of file and module names to 8.3 format
 * added procedure ErrorMessageI
 * improved message for 'illegal character'
 * improved handling or \r and \26
 *
 * Revision 1.7  1995/11/07  09:25:06  grosch
 * fixed bug with backslash at end of line
 *
 * Revision 1.6  1994/12/09  14:16:44  grosch
 * added pseudo function YYCODE
 *
 * Revision 1.5  1994/09/13  12:52:19  grosch
 * added generation of Ada code
 *
 * Revision 1.4  1994/08/30  12:13:58  grosch
 * added negation of predicates
 * improved handling of source position for compound tokens
 * added procedure GetLookahaed
 * added reparsing feature
 *
 * Revision 1.3  1994/07/14  12:25:36  grosch
 * deleted superfluous variables
 *
 * Revision 1.2  1994/03/23  15:09:56  grosch
 * allow several start symbols
 * accept Yacc input as well as Lark input
 *
 * Revision 1.1  1994/03/17  22:23:08  grosch
 * added generation of C++
 * added cost and repr specs for terminals
 *
 * Revision 1.0  1994/02/01  14:05:54  grosch
 * Initial revision
 *
 */

/* Ich, Doktor Josef Grosch, Informatiker, 25.1.1993 */

EXPORT	{
FROM Idents	IMPORT tIdent;
FROM StringM	IMPORT tStringRef;
FROM Texts      IMPORT tText;
FROM Position	IMPORT tPosition;

INSERT tScanAttribute
}

GLOBAL	{
FROM SYSTEM	IMPORT ADR, ADDRESS;
FROM General	IMPORT Log10;
FROM Strings	IMPORT tString, ArrayToString, Concatenate, SubString, AssignEmpty,
			Assign, Char, Length, StringToInt, IntToString;
FROM StringM	IMPORT tStringRef, PutString;
FROM Idents	IMPORT MakeIdent, GetStringRef, NoIdent;
FROM Texts	IMPORT tText, Append, MakeText;
FROM Sets	IMPORT Include;
FROM Position	IMPORT tPosition;
FROM Errors	IMPORT Message, MessageI, Error;
FROM Tree	IMPORT ErrorCount, Language, tLanguage, Global,
			Tail, TailPos, Options;
FROM Generate	IMPORT MakeDirective;

IMPORT Errors;

CONST LPar	= 41;
CONST RPar	= 42;

VAR
   Level	: CARDINAL;
   HasTags	: BOOLEAN;
   ActPos, CmtPos, StrPos	: tPosition;
   PrevValue	: tText;

PROCEDURE ErrorMessage (Text: ARRAY OF CHAR; Pos: tPosition);
   BEGIN
      Message (Text, Error, Pos);
      INC (ErrorCount);
   END ErrorMessage;

PROCEDURE ErrorMessageI (Text: ARRAY OF CHAR; Pos: tPosition; InfoClass: CARDINAL; Info: ADDRESS);
   BEGIN
      MessageI (Text, Error, Pos, InfoClass, Info);
      INC (ErrorCount);
   END ErrorMessageI;

INSERT ErrorAttribute
}

LOCAL	{
VAR
   Word, String, LastWord	: tString;
   PrevState, PrevState2	: SHORTCARD;
   i, l				: INTEGER;
   HasPar			: BOOLEAN;
   ch				: CHAR;
   LineNo			: LONGCARD;
}

BEGIN	{ HasTags := FALSE; }

DEFAULT	{
   GetWord (Word);
   ch := Char (Word, 1);
   IF (' ' < ch) AND (ch <= '~') THEN
      ErrorMessageI ("illegal character", Attribute.Position, Errors.String,
	 ADR (Word));
   ELSE
      ArrayToString ("\", String);				(* vi " *)
      IntToString (ORD (ch), Word);
      Concatenate (String, Word);
      ErrorMessageI ("illegal character", Attribute.Position, Errors.String,
	 ADR (String));
   END;
}

EOF	{
   CASE yyStartState OF
   | Code1, Code2	: ErrorMessage ("unterminated action or target code", ActPos);
   | Comment1, Comment2	: ErrorMessage ("unterminated comment", CmtPos);
   | Str1, Str2,
     CStr1, CStr2,
     AStr1, AStr2	: ErrorMessage ("unterminated string" , StrPos);
   ELSE
   END;
}

DEFINE
   digit	= {0-9}		.
   letter	= {a-z A-Z _}	.
   cmt		= - {*(\t\n}	.
   cmt2		= - {*\t\n}	.
   code1char	= - {\\{\}\t\n\r'"GgBbRrY#} .
   code2char	= - {\\[]\t\n\r'"GgBbRrY#} .
   StrCh1	= - {'\t\n\r}	.
   StrCh2	= - {"\t\n\r}	.
   CStrCh1	= - {'\t\n\r\\}	.
   CStrCh2	= - {"\t\n\r\\}	.
   AStrCh1	= {\ -&(-~}	.
   AStrCh2	= {\ !#-~}	.
   Letter	= {A-Za-z._}	.
   Digit	= {0-9}		.
   comment	= "/*" -{*}* "*"+ (-{*/} -{*}* "*"+) * "/" .
   ToSkip	= ( {\ \t\n\f\r} | comment ) * .
   WS		= {\ \t} *	.

START Token, Rule, Code1, Code2, Str1, Str2, CStr1, CStr2, AStr1, AStr2,
      Comment1, Comment2, PPline

Yacc, Code, Union, RulePart, Action, String1, String2, TailPart

RULES

#STD#		%		: { yyStart (Yacc); yyLess (0); Include (Options, ORD ('.')); }

/* Lark */

#STD#		\SCANNER	: { RETURN 'SCANNER'	; }
#STD#		\PARSER		: { RETURN 'PARSER'	; }
#STD#		\IMPORT		: { RETURN 'IMPORT'	; }
#STD#		\EXPORT		: { RETURN 'EXPORT'	; }
#STD#		\GLOBAL		: { RETURN 'GLOBAL'	; }
#STD#		\LOCAL		: { RETURN 'LOCAL'	; }
#STD#		\BEGIN		: { RETURN 'BEGIN'	; }
#STD#		\CLOSE		: { RETURN 'CLOSE'	; }
#STD#		TOKEN		: { yyStart (Token); RETURN 'TOKEN'	; }
#STD, Token#	PREC | OPER	: { yyStart (Token); RETURN 'PREC'	; }
#STD, Token#	START		: { yyStart (Token); RETURN 'START'	; }
#Token#		NONE		: { RETURN 'NONE'	; }
#Token#		LEFT		: { RETURN 'LEFT'	; }
#Token#		RIGHT		: { RETURN 'RIGHT'	; }
#Token#		"="		: { RETURN '='		; }
#Token#		","		: { RETURN ','		; }
#STD, Token#	RULE		: { yyStart (Rule); RETURN 'RULE'	; }
#Rule#		PREC		: { RETURN 'PREC'	; }
#Rule#		"$"		: { RETURN '$'		; }
#Rule#		"-"		: { RETURN '-'		; }
#STD, Rule#	"."		: { RETURN '.'		; }
#Rule#		":"		: { RETURN ':'		; }
#Rule#		"?"		: { RETURN '?'		; }
#Rule#		"|"		: { RETURN '|'		; }
#Rule#		"(" WS		: { RETURN LPar		; }
#Rule#		WS ")"		: { RETURN RPar		; }

#Token#	digit +	:
{
  GetWord (Word);
  Attribute.Number.Value := StringToInt (Word);
  RETURN Number;
}

#STD, Token, Rule#	\\ letter (letter | digit) *	:
{
  GetWord (Word);
  SubString (Word, 2, Length (Word), String);
  Attribute.Identifier.Ident := MakeIdent (String);
  RETURN Identifier;
}

#STD, Token, Rule#	letter (letter | digit) *	:
{
  GetWord (Word);
  Attribute.Identifier.Ident := MakeIdent (Word);
  RETURN Identifier;
}

#STD, Rule#	"{"	:
{
  PrevState := yyStartState;
  ActPos := Attribute.Position;
  yyStart (Code1);
  AssignEmpty (LastWord);
  MakeText (Attribute.Action.Value);
  Level := 1;
}

#STD, Rule#	"["	:
{
  PrevState := yyStartState;
  ActPos := Attribute.Position;
  yyStart (Code2);
  AssignEmpty (LastWord);
  MakeText (Attribute.UCAction.Value);
  Level := 1;
}

#Token, Rule, Code1, Code2# \': { GetWord (String);
				  StrPos := Attribute.Position;
				  IF (Language = C) OR (Language = Cpp) THEN yyStart (CStr1);
				  ELSIF Language = Ada THEN yyStart (AStr1);
				  ELSE yyStart (Str1);
				  END; }

#Token, Rule, Code1, Code2# \": { GetWord (String);		(* vi " *)
				  StrPos := Attribute.Position;
				  IF (Language = C) OR (Language = Cpp) THEN yyStart (CStr2);
				  ELSIF Language = Ada THEN yyStart (AStr2);
				  ELSE yyStart (Str2);
				  END; }

#Str1#	StrCh1  + | \'\'	,
#Str2#	StrCh2  + | \"\"	,				// vi "
#CStr1#	CStrCh1 + | \\ ANY ?	,
#CStr2#	CStrCh2 + | \\ ANY ?	,
#AStr1# AStrCh1 +		,
#AStr2# AStrCh2 +	:- { GetWord (Word); Concatenate (String, Word); }

#CStr1, CStr2# \\ \r ? \n:-{Strings.Append (String, '\');
			    Strings.Append (String, 12C); yyEol (0);}

#Str1, CStr1, AStr1# '	,
#Str2, CStr2, AStr2# \"	:-					// vi "
			  { GetWord (Word); Concatenate (String, Word);
			    yyPrevious;
			    IF (yyStartState = Code1) OR (yyStartState = Code2) THEN
			       Concatenate (LastWord, String);
			    ELSE
			       Attribute.String.Ident := MakeIdent (String);
			       RETURN String;
			    END; }

#Str1, Str2, CStr1, CStr2# \t :- { Strings.Append (String, 11C); yyTab; }

#Str1, Str2, CStr1, CStr2, AStr1, AStr2# \r ? \n : {
			    Strings.Append (String, 12C);
			    yyEol (0); yyPrevious;
			    IF (yyStartState = Token) OR (yyStartState = Rule) THEN
			       ErrorMessage ("end of string expected", Attribute.Position);
			    END;
			    IF (yyStartState = Code1) OR (yyStartState = Code2) THEN
			       Concatenate (LastWord, String);
			    ELSE
			       Attribute.String.Ident := MakeIdent (String);
			       RETURN String;
			    END; }

#Str1, Str2, CStr1, CStr2# \r :- {Strings.Append (String, 15C);}

#STD, Token, Rule# "(*" : { yyStart (Comment1); CmtPos := Attribute.Position; Level := 1; }

#STD, Token, Rule# "/*" : { yyStart (Comment2); CmtPos := Attribute.Position; }

#STD, Token, Rule# "//" ANY * :- {}

#Code1#	\\ ANY | {GgBbRrY\r#} | code1char +	,
#Code1#	\\ / \r ? \n				,
#Code2#	\\ ANY | {GgBbRrY\r#} | code2char +	,
#Code2#	\\ / \r ? \n				:-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
}

#Code1, Code2# GetLookahead | GetAttribute :-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF Language # Java THEN Include (Options, ORD ('&')); END;
}

#Code1, Code2# getLookahead | getAttribute :-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF Language = Java THEN Include (Options, ORD ('&')); END;
}

#Code1, Code2# BufferOn | BufferOff | ReParse :-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF Language # Java THEN Include (Options, ORD (';')); END;
}

#Code1, Code2# bufferOn | bufferOff | reParse :-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF Language = Java THEN Include (Options, ORD (';')); END;
}

#Code1, Code2# YYCODE WS :-
{
  l := TokenLength - 3; HasPar := FALSE;
  PrevState2 := yyStartState; yyStart (Rule);
  PrevValue := Attribute.Action.Value;
  Strings.Append (LastWord, '$');
  Strings.Append (LastWord, '(');
  i := GetToken (); INC (l, TokenLength);
  IF i = LPar THEN i := GetToken (); INC (l, TokenLength); HasPar := TRUE; END;
  IntToString (Attribute.Identifier.Ident, Word); Concatenate (LastWord, Word);
  DEC (TokenLength, Log10 (Attribute.Identifier.Ident) + 1);
  IF HasPar THEN i := GetToken (); INC (l, TokenLength); END;
  Strings.Append (LastWord, ')');
  FOR i := 1 TO l DO Strings.Append (LastWord, ' '); END;
  Attribute.Action.Value := PrevValue;
  yyStart (PrevState2);
}

#Code1, Code2#	\\	: { ErrorMessage ("illegal character", Attribute.Position); }

#Code1, Code2#	\t	:-
{
  yyTab;
  GetWord (Word);
  Concatenate (LastWord, Word);
}

#Code1#	\r ? \n	:-
{
  Append (Attribute.Action.Value, LastWord);
  AssignEmpty (LastWord);
  yyEol (0);
}

#Code2#	\r ? \n	:-
{
  Append (Attribute.UCAction.Value, LastWord);
  AssignEmpty (LastWord);
  yyEol (0);
}

#Code1#	"{"	:-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  INC (Level);
}

#Code1#	"}"	:-
{
  DEC (Level);
  IF Level = 0 THEN
    yyStart (PrevState);
    Attribute.Position := ActPos;
    Append (Attribute.Action.Value, LastWord);
    RETURN Action;
  ELSE
    GetWord (Word);
    Concatenate (LastWord, Word);
  END;
}

#Code2#	"["	:-
{
  GetWord (Word);
  Concatenate (LastWord, Word);
  INC (Level);
}

#Code2#	"]"	:-
{
  DEC (Level);
  IF Level = 0 THEN
    yyStart (PrevState);
    Attribute.Position := ActPos;
    Append (Attribute.UCAction.Value, LastWord);
    RETURN UCAction;
  ELSE
    GetWord (Word);
    Concatenate (LastWord, Word);
  END;
}

#Comment1# "(*"		:- { INC (Level); }
#Comment1# "*)"		:- { DEC (Level); IF Level = 0 THEN yyPrevious; END; }
#Comment1# "(" | "*" | cmt +	:- { }

#Comment2# "*" | cmt2 +	:- { }
#Comment2# "*/"		:- { yyPrevious; }

/* Yacc */

#RulePart# Letter (Letter | Digit) * / ToSkip ":" :
				  { GetWord (Word);
				    Attribute.C_Identifier.Ident := MakeIdent (Word);
				    RETURN C_Identifier	; }
#Yacc, RulePart# Letter (Letter | Digit) * :
				  { GetWord (Word);
				    Attribute.Identifier.Ident := MakeIdent (Word);
				    RETURN Identifier	; }
#Yacc, RulePart# ' - {'\n} + '	: { GetWord (Word);
				    Attribute.String.Ident := MakeIdent (Word);
				    RETURN String;	; }
#Yacc, RulePart# ' \\ ANY + '	: { GetWord (Word);
				    Attribute.String.Ident := MakeIdent (Word);
				    RETURN String;	; }
#Yacc, RulePart# Digit +	: { GetWord (Word);
				    Attribute.Number.Value := StringToInt (Word);
				    RETURN Number	; }

#Yacc# "%left"		: { RETURN '%left'	; }
#Yacc# "%right"		: { RETURN '%right'	; }
#Yacc# "%nonassoc"	: { RETURN '%nonassoc'	; }
#Yacc# "%token"		: { RETURN '%token'	; }
#Yacc, RulePart# "%prec": { RETURN '%prec'	; }
#Yacc# "%type"		: { RETURN '%type'	; }
#Yacc# "%start"		: { RETURN '%start'	; }

#Yacc# "%union"		:-{ yyStart (Union); Level := 0;
			    ArrayToString ("typedef union {", LastWord); }
#Union# \{		:-{ IF Level > 0 THEN Strings.Append (LastWord, '{'); END;
			    INC (Level); }
#Union# - {{\}\n\r} *	,
#Union# \r		:-{ GetWord (Word); Concatenate (LastWord, Word); }
#Union# \r ? \n		:-{ Append (Global, LastWord);
			    AssignEmpty (LastWord); yyEol (0); }
#Union# \} ;?		:-{ DEC (Level);
			    IF Level > 0 THEN
			       GetWord (Word); Concatenate (LastWord, Word);
			    ELSE
			       yyPrevious;
			       ArrayToString ("} tParsAttribute;", Word);
			       Concatenate (LastWord, Word);
			       Append (Global, LastWord);
			    END; }

#Yacc#	   %%		: { yyStart (RulePart);
			    IF NOT HasTags THEN
   ArrayToString ("# ifndef tParsAttribute"	, Word); Append (Global, Word);
   ArrayToString ("# define tParsAttribute int"	, Word); Append (Global, Word);
   ArrayToString ("# endif"			, Word); Append (Global, Word);
			    END;
			    RETURN '%%'; }
#RulePart# %%		: { TailPos := Attribute.Position; yyStart (TailPart); }

#Yacc# "%{"		:-{ yyStart (Code); AssignEmpty (LastWord); }
#Code# - {%\n\r} +	,
#Code# {%\r}		:-{ GetWord (Word); Concatenate (LastWord, Word); }
#Code# \r ? \n		:-{ Append (Global, LastWord);
			    AssignEmpty (LastWord); yyEol (0); }
#Code# "%}"		:-{ Append (Global, LastWord); yyPrevious; }

#Yacc, RulePart# "<"	: { HasTags := TRUE; RETURN '<'; }
#Yacc, RulePart# ">"	: { RETURN '>'; }
#Yacc, RulePart# ","	: { RETURN ','; }
#Yacc, RulePart# "|"	: { RETURN '|'; }
#Yacc, RulePart# ";"	: { RETURN ';'; }
#Yacc, RulePart# ":"	: { RETURN ':'; }

#RulePart# "{"		: { yyStart (Action); Level := 1; AssignEmpty (LastWord);
			    MakeText (Attribute.Action.Value); }

#Action#  '		:-{ Strings.Append (LastWord, "'"); yyStart (String1); }
#String1# - {'} +	:-{ GetWord (Word); Concatenate (LastWord, Word); }
#String1# '		:-{ Strings.Append (LastWord, "'"); yyPrevious; }

#Action#  \"		:-{ Strings.Append (LastWord, '"'); yyStart (String2); }
#String2# - {"} +	:-{ GetWord (Word); Concatenate (LastWord, Word); }
#String2# \"		:-{ Strings.Append (LastWord, '"'); yyPrevious; }

#Action# "{"		:-{ Strings.Append (LastWord, '{'); INC (Level); }
#Action# - {{\}'"/\n\r} + | "/"	:-{ GetWord (Word); Concatenate (LastWord, Word); }
#Action# \n		:-{ Append (Attribute.Action.Value, LastWord);
			    AssignEmpty (LastWord); yyEol (0); }
#Action# "}"		:-{ DEC (Level);
			    IF Level > 0 THEN
			       Strings.Append (LastWord, '}');
			    ELSE
			       yyStart (RulePart);
			       Append (Attribute.Action.Value, LastWord);
			       RETURN Action;
			    END; }

#Yacc, RulePart, Action# "/*" : { yyStart (Comment2); CmtPos := Attribute.Position; }

/* scan tail after second %% */

#TailPart# ANY +	:-{ GetWord (Word); Append (Tail, Word); }

\f , \r , \26		:-{}

// interpret #@ line directives

< "#@" " " * "line"	:-{ yyPush (PPline); }

#PPline# {0-9} +	:-{
			    GetWord (Word);
			    LineNo := StringToInt (Word);
			}

#PPline# \" - {\n"} + \":-{
			    GetWord (Word);
			    SubString (Word, 2, Length (Word) - 1, Word);
			    yyLineCount := LineNo - 1;
			    (* change line # only if there is a file name *)
			    (* -1 compensates for the following yyEol () *)
			    Attribute.Position.File := MakeIdent (Word);
			}

#PPline# \r ? \n	:- {
			    yyPop ();
			    yyEol (0);
			    CASE yyStartState OF
			    | Code1:
			      MakeDirective (String, yyLineCount,
				Attribute.Position.File);
			      Append (Attribute.Action.Value, String);
			    | Code2:
			      MakeDirective (String, yyLineCount,
				Attribute.Position.File);
			      Append (Attribute.UCAction.Value, String);
			    ELSE
			    END;
			}
