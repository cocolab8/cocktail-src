Patterns: Tree
---------

Classes ()
NoClass ()
Class (Name := Name, Properties := Properties, Attributes := Attributes, Extensions := Extensions: Classes, Next := Next: Classes, BaseClass := BaseClass: Classes, Objects := Objects, TypeDesc := TypeDesc, Index := Index)
Attributes ()
NoAttribute ()
AttrOrAction (Next := Next: Attributes)
AttrOrChild (Next := Next: Attributes, Name := Name, Type := Type, CppType := CppType, Properties := Properties, Init := Init)
Child (Next := Next: Attributes, Name := Name, Type := Type, CppType := CppType, Properties := Properties, Init := Init, Class := Class: Classes)
Attribute (Next := Next: Attributes, Name := Name, Type := Type, CppType := CppType, Properties := Properties, Init := Init, NodeType := NodeType: Classes)
ActionPart (Next := Next: Attributes)
UCActionPart (Next := Next: Attributes)
TrialParse (Next := Next: Attributes)
CondParse (Next := Next: Attributes)
PrecClause (Next := Next: Attributes)
Codes (Export := Export, Import := Import, Global := Global, Local := Local, Begin := Begin, Close := Close, ExportLine := ExportLine, ImportLine := ImportLine, GlobalLine := GlobalLine, LocalLine := LocalLine, BeginLine := BeginLine, CloseLine := CloseLine)
Designators ()
NoDesignator ()
cDesignator (Next := Next: Designators)
Designator (Next := Next: Designators, Selector := Selector, Attribute := Attribute, Pos := Pos, Object := Object, Type := Type)
Ident (Next := Next: Designators, Attribute := Attribute, Pos := Pos, Object := Object)
Remote (Next := Next: Designators, Designators := Designators, Type := Type, Attribute := Attribute, Pos := Pos)
Any (Next := Next: Designators, Code := Code)
Anys (Next := Next: Designators, Layouts := Layouts)
Layouts ()
NoLayout ()
LayoutAny (Code := Code, Next := Next: Layouts)
Names ()
NoName ()
Name (Name := Name, Pos := Pos, Next := Next: Names, Object := Object)
Ag ()
Precs ()
NoPrec ()
Prec ()
LeftAssoc ()
RightAssoc ()
NonAssoc ()
Actions ()
NoAction ()
Action ()
Assign ()
Copy ()
TargetCode ()
Order ()
Check ()
Modules ()
NoModule ()
Module ()
Props ()
NoProp ()
Prop ()
Select ()
Decls ()
NoDecl ()
Decl ()
Spec (TrafoName := TrafoName, TreeNames := TreeNames, Public := Public: Names, Imports := Imports, Extern := Extern: Names, Codes := Codes, Declarations := Declarations, Routines := Routines)
TreeNames ()
NoTreeName ()
TreeName (Name := Name, Package := Package, Pos := Pos, Next := Next: TreeNames, Classes := Classes, ClassCount := ClassCount, tName := tName, Prefix := Prefix, IndexToClass := IndexToClass)
Imports ()
NoImport ()
Import (Next := Next: Imports, Name := Name, Pos := Pos, Spec := Spec)
Routines ()
NoRoutine ()
Routine (Next := Next: Routines, Name := Name, Pos := Pos, InParams := InParams: Declarations, OutParams := OutParams: Declarations, Extern := Extern: Names, Local := Local, LocalLine := LocalLine, Declarations := Declarations, Rules := Rules, IsPublic := IsPublic, InObjects := InObjects, OutObjects := OutObjects, ParamDecls := ParamDecls, Decisions := Decisions, HasTailRecursion := HasTailRecursion)
Procedure (Next := Next: Routines, Name := Name, Pos := Pos, InParams := InParams: Declarations, OutParams := OutParams: Declarations, Extern := Extern: Names, Local := Local, LocalLine := LocalLine, Declarations := Declarations, Rules := Rules, IsPublic := IsPublic, InObjects := InObjects, OutObjects := OutObjects, ParamDecls := ParamDecls, Decisions := Decisions, HasTailRecursion := HasTailRecursion, IsTrip := IsTrip)
Function (Next := Next: Routines, Name := Name, Pos := Pos, InParams := InParams: Declarations, OutParams := OutParams: Declarations, Extern := Extern: Names, Local := Local, LocalLine := LocalLine, Declarations := Declarations, Rules := Rules, IsPublic := IsPublic, InObjects := InObjects, OutObjects := OutObjects, ParamDecls := ParamDecls, Decisions := Decisions, HasTailRecursion := HasTailRecursion, ReturnParams := ReturnParams: Declarations, ReturnObjects := ReturnObjects)
Predicate (Next := Next: Routines, Name := Name, Pos := Pos, InParams := InParams: Declarations, OutParams := OutParams: Declarations, Extern := Extern: Names, Local := Local, LocalLine := LocalLine, Declarations := Declarations, Rules := Rules, IsPublic := IsPublic, InObjects := InObjects, OutObjects := OutObjects, ParamDecls := ParamDecls, Decisions := Decisions, HasTailRecursion := HasTailRecursion)
Trip (Next := Next: Routines, Name := Name, Pos := Pos, InParams := InParams: Declarations, OutParams := OutParams: Declarations, Extern := Extern: Names, Local := Local, LocalLine := LocalLine, Declarations := Declarations, Rules := Rules, IsPublic := IsPublic, InObjects := InObjects, OutObjects := OutObjects, ParamDecls := ParamDecls, Decisions := Decisions, HasTailRecursion := HasTailRecursion, IsTrip := IsTrip)
Declarations ()
NoDeclaration ()
Declaration (Next := Next: Declarations, Name := Name, Pos := Pos, Type := Type, Object := Object)
ParamDecl (Next := Next: Declarations, Name := Name, Pos := Pos, Type := Type, Object := Object, IsRef := IsRef)
VarDecl (Next := Next: Declarations, Name := Name, Pos := Pos, Type := Type, Object := Object)
InitDecl (Next := Next: Declarations, Name := Name, Pos := Pos, Type := Type, Object := Object, Expr := Expr)
Type (Name := Name, Pos := Pos, Names := Names)
Rules ()
NoRule ()
Rule (Line := Line, Patterns := Patterns, Exprs := Exprs, Expr := Expr, Statements := Statements, Next := Next: Rules, Tempo := Tempo, Index := Index, Tests := Tests, Properties := Properties, HasDeclsStmts := HasDeclsStmts)
Patterns ()
NoPattern (Pos := Pos)
OnePattern (Pattern := Pattern, Next := Next: Patterns)
PatternsList ()
NoPatternsList ()
OnePatternsList (Patterns := Patterns, Next := Next: PatternsList)
Pattern (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path)
Decompose (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path, Selector := Selector, Expr := Expr, Patterns := Patterns, Widen := Widen, Object := Object)
VarDef (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path, Name := Name, Object := Object)
NilTest (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path, Selector := Selector)
DontCare1 (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path)
DontCare (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path, Tempos := Tempos)
Value (Pos := Pos, Tempo := Tempo, TypeDesc := TypeDesc, Path := Path, Expr := Expr)
Exprs ()
NoExpr (Pos := Pos)
OneExpr (Expr := Expr, Next := Next: Exprs)
NamedExpr (Expr := Expr, Next := Next: Exprs, Name := Name)
Expr (Pos := Pos)
NoExpression (Pos := Pos)
Compose (Pos := Pos, Selector := Selector, Expr := Expr, Exprs := Exprs, Widen := Widen, Object := Object, Tempo := Tempo, TypeDesc := TypeDesc)
VarUse (Pos := Pos, Name := Name, Object := Object)
AttrDesc (Pos := Pos, Name := Name, Attribute := Attribute, Object := Object, Type := Type, TypeDesc := TypeDesc)
Nil (Pos := Pos, Selector := Selector)
Call (Pos := Pos, Expr := Expr, Exprs := Exprs, Patterns := Patterns, Object := Object, TailRecursion := TailRecursion)
Binary (Pos := Pos, Lop := Lop: Expr, Operator := Operator, Rop := Rop: Expr)
PreOperator (Pos := Pos, Operator := Operator, Expr := Expr)
PostOperator (Pos := Pos, Operator := Operator, Expr := Expr)
Index (Pos := Pos, Expr := Expr, Exprs := Exprs)
Parents (Pos := Pos, Expr := Expr)
TargetExpr (Pos := Pos, Expr := Expr: Designators, UsedNames := UsedNames)
StringExpr (Pos := Pos, String := String)
Guard (Pos := Pos, Expr := Expr, Tempo := Tempo, Object := Object)
Statements (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls)
NoStatement (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls)
Statement (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements)
ProcCall (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Call := Call: Expr)
Condition (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Expr := Expr)
Assignment (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Adr := Adr: Expr, Expr := Expr, Operator := Operator, Object := Object)
MatchStmt (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Exprs := Exprs, Patterns := Patterns, Tempo := Tempo, Object := Object)
IfMatch (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Expr := Expr, Exprs := Exprs, Patterns := Patterns, Then := Then: Statements, Else := Else: Statements, Tempo := Tempo, Object := Object, HasDeclsThen := HasDeclsThen, HasDeclsElse := HasDeclsElse)
If (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Expr := Expr, Then := Then: Statements, Else := Else: Statements, HasDeclsThen := HasDeclsThen, HasDeclsElse := HasDeclsElse)
For (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Init := Init: Statements, Expr := Expr, Step := Step: Statements, Statements := Statements, HasDeclsStmts := HasDeclsStmts)
ForEach (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Var := Var: Statements, Expr := Expr, Statements := Statements, Type := Type, TypeDesc := TypeDesc, Iterator := Iterator, HasDeclsStmts := HasDeclsStmts)
Return (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Expr := Expr, Tempo := Tempo, Rule := Rule, Properties := Properties)
Reject (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements)
Fail (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements)
DeclStmt (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Declarations := Declarations)
TargetStmt (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, Stmt := Stmt: Designators, UsedNames := UsedNames)
Nl (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements)
WriteStr (DoesStop := DoesStop, IsReachable := IsReachable, HasDecls := HasDecls, HasAnyDecls := HasAnyDecls, Pos := Pos, Next := Next: Statements, String := String)
Objects ()
NoObject ()
Object (Next := Next: Objects, Name := Name, TypeDesc := TypeDesc, Path := Path, AttrOrChild := AttrOrChild)
DummyObject (Next := Next: Objects)
TypeDesc ()
NodeTypes (TreeName := TreeName, Types := Types, BaseTypes := BaseTypes)
UserType (Type := Type, CppType := CppType)
TargetType (Type := Type: Designators)
Path ()
Var (Name := Name, IsOutput := IsOutput, IsRegister := IsRegister)
ConsType (Next := Next: Path, Name := Name, Class := Class)
Field (Next := Next: Path, Name := Name, Object := Object)
Tests ()
NoTest ()
OneTest (Next := Next: Tests, Path := Path)
TestKind (Next := Next: Tests, Path := Path, TypeDesc := TypeDesc: NodeTypes, Name := Name)
TestIsType (Next := Next: Tests, Path := Path, TypeDesc := TypeDesc: NodeTypes, Name := Name)
TestNil (Next := Next: Tests, Path := Path)
TestNonlin (Next := Next: Tests, Path := Path, Path2 := Path2: Path, TypeDesc := TypeDesc)
TestValue (Next := Next: Tests, Path := Path, Expr := Expr, TypeDesc := TypeDesc)
Decisions ()
NoDecision ()
Decision (Then := Then: Decisions, Else := Else: Decisions, OneTest := OneTest, Cases := Cases, IsUnchanged := IsUnchanged)
Decided (Else := Else: Decisions, Rule := Rule)
MatchConds ()
NoMatchCond ()
MatchCond (Next := Next: MatchConds, Expr := Expr, Pattern := Pattern: Expr)

