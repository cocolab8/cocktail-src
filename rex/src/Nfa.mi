(* $Id: Nfa.mi,v 3.5 2007/03/27 09:49:25 grosch rel $ *)

(*
 * $Log: Nfa.mi,v $
 * Revision 3.5  2007/03/27 09:49:25  grosch
 * fixed overflow of variable NodeCount
 * changed some INT types to CARD
 *
 * Revision 3.4  2000/09/12 17:39:40  grosch
 * added support for Unicode
 *
 * Revision 3.3  1999/05/03 14:41:31  grosch
 * increased array bounds for TransitionTable
 *
 * Revision 3.2  1998/04/21 10:29:21  grosch
 * cosmetic changes
 *
 * Revision 3.1  1991/11/21 14:41:19  grosch
 * fixed bug: interference of right context between constant and non-constant RE
 * new version of RCS on SPARC
 *
 * Revision 3.0  91/04/04  18:07:25  grosch
 * introduced partitioning of character set
 * 
 * Revision 1.2  91/03/26  18:26:53  grosch
 * improved generation time
 * introduced options n and o to control table size and generation time
 * increased limitation for table size from 64K to 256K
 * 
 * Revision 1.1  90/05/17  11:17:13  grosch
 * added missing initialization
 * 
 * Revision 1.0  88/10/04  11:59:36  grosch
 * Initial revision
 * 
 *)

(* Ich, Doktor Josef Grosch, Informatiker, Nov. 1987 *)

IMPLEMENTATION MODULE Nfa;

FROM SYSTEM	IMPORT TSIZE;
FROM DynArray	IMPORT MakeArray, ExtendArray, ReleaseArray;
FROM IO		IMPORT WriteC, WriteI, WriteNl, WriteS, StdOutput;
FROM Layout	IMPORT WriteSpace;
FROM ScanTabs	IMPORT RuleType, NoRule;
FROM GenTabs	IMPORT LeafCount;
FROM UniCode	IMPORT WriteChar;
FROM Classes	IMPORT tCharClass;

CONST InitialTransitionTableSize = 4096;

TYPE
   Transition		= RECORD
			     Ch		: tCharClass;
			     NextState	: NStateRange;
			     NextTrans	: TransitionRange;
			  END;

   NStateInfo		= RECORD
			     Transitions: TransitionRange;
			     Semantics	: RuleType;
			  END;

   NStateTable		= ARRAY [0 .. 10000000] OF NStateInfo;
   TransitionTable	= ARRAY [0 .. 10000000] OF Transition;
(* necessary to force index arithmetic to be done with long integers *)

VAR
   NStateTablePtr	: POINTER TO NStateTable;
   NStateTableSize	: LONGINT;

   TransitionTablePtr	: POINTER TO TransitionTable;
   TransitionTableSize	: LONGINT;

PROCEDURE MakeNState (pTransitions: TransitionRange): NStateRange;
   BEGIN
      INC (NStateCount);
      IF NStateCount = LONGCARD (NStateTableSize) THEN
	 ExtendArray (NStateTablePtr, NStateTableSize, TSIZE (NStateInfo));
      END;
      WITH NStateTablePtr^[NStateCount] DO
	 Transitions := pTransitions;
	 Semantics   := NoRule;
      END;
      RETURN NStateCount;
   END MakeNState;

PROCEDURE PutNSemantics (State: NStateRange; pSemantics: RuleType);
   BEGIN
      NStateTablePtr^[State].Semantics := pSemantics;
   END PutNSemantics;

PROCEDURE GetNSemantics (State: NStateRange): RuleType;
   BEGIN
      RETURN NStateTablePtr^[State].Semantics;
   END GetNSemantics;

PROCEDURE PutTransitions (State: NStateRange; Transitions: TransitionRange);
   BEGIN
      NStateTablePtr^[State].Transitions := Transitions;
   END PutTransitions;

PROCEDURE GetTransitions (State: NStateRange): TransitionRange;
   BEGIN
      RETURN NStateTablePtr^[State].Transitions;
   END GetTransitions;

PROCEDURE IsLastTransition (Transition: TransitionRange): BOOLEAN;
   BEGIN
      RETURN Transition = NoTransition;
   END IsLastTransition;

PROCEDURE NextTransition (Transition: TransitionRange): TransitionRange;
   BEGIN
      RETURN TransitionTablePtr^[Transition].NextTrans;
   END NextTransition;

PROCEDURE MakeTransition (pCh: tCharClass; State: NStateRange): TransitionRange;
   BEGIN
      INC (TransitionCount);
      IF TransitionCount = LONGCARD (TransitionTableSize) THEN
	 ExtendArray (TransitionTablePtr, TransitionTableSize, TSIZE (Transition));
      END;
      WITH TransitionTablePtr^[TransitionCount] DO
	 Ch	   := pCh;
	 NextState := State;
	 NextTrans := NoTransition;
      END;
      RETURN TransitionCount;
   END MakeTransition;

PROCEDURE AddTransition (Transition, Transitions: TransitionRange): TransitionRange;
   BEGIN
      TransitionTablePtr^[Transition].NextTrans := Transitions;
      RETURN Transition;
   END AddTransition;

PROCEDURE GetCh (Transition: TransitionRange): tCharClass;
   BEGIN
      RETURN TransitionTablePtr^[Transition].Ch;
   END GetCh;

PROCEDURE GetNextState (Transition: TransitionRange): NStateRange;
   BEGIN
      RETURN TransitionTablePtr^[Transition].NextState;
   END GetNextState;

PROCEDURE UniteTransitions (t1, t2: TransitionRange): TransitionRange;
   VAR t : TransitionRange;
   BEGIN
      IF t1 = NoTransition THEN RETURN t2; END; (* IsLastTransition *)
      WHILE t2 # NoTransition DO		(* NOT IsLastTransition *)
         t  := TransitionTablePtr^[t2].NextTrans; (* NextTransition *)
	 t1 := AddTransition (t2, t1);
	 t2 := t;
      END;
      RETURN t1;
   END UniteTransitions;

PROCEDURE CopyTransitions (t1: TransitionRange): TransitionRange;
   VAR t2 : TransitionRange;
   BEGIN
      t2 := NoTransition;
      WHILE t1 # NoTransition DO		(* NOT IsLastTransition *)
         WITH TransitionTablePtr^[t1] DO	(* GetCh + GetNextState *)
	    t2 := AddTransition (MakeTransition (Ch, NextState), t2);
	    t1 := NextTrans;			(* NextTransition *)
	 END;
      END;
      RETURN t2;
   END CopyTransitions;

PROCEDURE WriteNfa;
   VAR State	: NStateRange;
   BEGIN
      WriteS (StdOutput, "NFA :");
      WriteNl (StdOutput);
      WriteNl (StdOutput);
      FOR State := 1 TO NStateCount DO
	 WriteS (StdOutput, "State, Semantics =");
	 WriteI (StdOutput, State, 5);
	 WriteI (StdOutput, GetNSemantics (State), 5);
	 WriteNl (StdOutput);
	 WriteTransitions (GetTransitions (State));
	 WriteNl (StdOutput);
	 WriteNl (StdOutput);
      END;
      WriteNl (StdOutput);
   END WriteNfa;

PROCEDURE WriteTransitions (Transition: TransitionRange);
   VAR Count	: INTEGER;
   BEGIN
      Count := 0;
      WHILE NOT IsLastTransition (Transition) DO
	 IF Count = 10 THEN
	    WriteNl (StdOutput);
	    Count := 0;
	 END;
	 INC (Count);
	 WriteChar (StdOutput, GetCh (Transition));
	 WriteSpace (StdOutput);
	 WriteI (StdOutput, GetNextState (Transition), 1);
	 WriteC (StdOutput, ',');
	 WriteSpace (StdOutput);
	 Transition := NextTransition (Transition);
      END;
   END WriteTransitions;

PROCEDURE FinalizeNfa;
   BEGIN
      ReleaseArray (NStateTablePtr, NStateTableSize, TSIZE (NStateInfo));
      ReleaseArray (TransitionTablePtr, TransitionTableSize, TSIZE (Transition));
   END FinalizeNfa;

PROCEDURE BeginNfa;
   BEGIN
      NStateTableSize	:= LeafCount + 1;
      MakeArray (NStateTablePtr, NStateTableSize, TSIZE (NStateInfo));
      NStateCount 		:= 0;

      TransitionTableSize	:= InitialTransitionTableSize;
      MakeArray (TransitionTablePtr, TransitionTableSize, TSIZE (Transition));
      TransitionCount	:= 0;
   END BeginNfa;

END Nfa.
