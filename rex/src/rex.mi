(* $Id: rex.mi,v 4.22 2008/09/25 15:00:23 grosch Exp $ *)

(*
 * $Log: rex.mi,v $
 * Revision 4.22  2008/09/25 15:00:23  grosch
 * undid the change wrt. InitScanGen
 *
 * Revision 4.21  2008/09/17 18:42:13  grosch
 * fixed handling of line comments/directives
 *
 * Revision 4.20  2007/03/27 09:49:25  grosch
 * fixed overflow of variable NodeCount
 * changed some INT types to CARD
 *
 * Revision 4.19  2003/04/25 08:37:16  grosch
 * added license control based on WIBU-KEY
 *
 * Revision 4.18  2002/10/02 16:23:33  grosch
 * added initialization of Attribute.Position
 *
 * Revision 4.17  2001/08/28 20:50:52  grosch
 * added option and call for DrawTree
 *
 * Revision 4.16  2001/08/08 14:57:56  grosch
 * added and revised support for #line directives
 *
 * Revision 4.15  2001/01/24 09:17:25  grosch
 * added access to environment variable CT_DIR
 *
 * Revision 4.14  2000/09/12 17:39:40  grosch
 * added support for Unicode
 *
 * Revision 4.13  1999/11/16 17:52:34  grosch
 * added generation of Java
 *
 * Revision 4.12  1999/11/09 19:56:11  grosch
 * improved and purified license checking
 *
 * Revision 4.11  1999/07/12 14:59:09  grosch
 * added filename to error messages
 *
 * Revision 4.10  1998/04/21 10:34:34  grosch
 * added handling of license file
 *
 * Revision 4.9  1997/04/17 09:09:20  grosch
 * added support for # line 'dir\file' under Windows
 *
 * Revision 4.8  1997/01/17  21:29:43  grosch
 * removed Errors module, use the one from reuse
 *
 * Revision 4.7  1996/05/01  21:52:05  grosch
 * improved usage message
 *
 * Revision 4.6  1996/04/25  09:42:11  grosch
 * added option for omitting the predefined rules for skipping of white space
 * added option for printing of information about ambiguous rules
 * added option for specification of a file to be used as skeleton
 *
 * Revision 4.5  1995/07/07  12:04:05  grosch
 * describe option y for suppressing dummy labels
 *
 * Revision 4.4  1995/06/26  13:06:04  grosch
 * omit unused objects
 * suppress warnings (gcc -Wall)
 *
 * Revision 4.3  1995/04/15  17:22:56  grosch
 * added option x that requires explicit definitions for identifiers
 *
 * Revision 4.2  1994/09/13  12:43:56  grosch
 * added generation of Ada code
 *
 * Revision 4.1  1994/03/23  14:49:28  grosch
 * added generation of C++
 * read options from environment variable REX
 * added touching of output files only if necessary
 *
 * Revision 4.0  1993/08/26  16:01:21  grosch
 * replaced table files (Scanner.Tab, Parser.Tab, ...) by initialization code
 *
 * Revision 3.11  1993/08/18  15:10:38  grosch
 * rename System and Memory to rSystem and rMemory
 *
 * Revision 3.10  1993/05/28  14:09:53  grosch
 * added target language Eiffel
 *
 * Revision 3.9  1992/09/29  19:02:45  grosch
 * abort execution upon errors during scanning
 *
 * Revision 3.8  1992/09/29  14:38:55  grosch
 * abort execution upon errors during scanning
 *
 * Revision 3.7  1992/08/07  15:10:26  grosch
 * allow several scanner and parsers; extend module Errors
 *
 * Revision 3.6  1992/01/30  13:29:56  grosch
 * redesign of interface to operating system
 *
 * Revision 3.5  1992/01/14  10:42:44  grosch
 * fixed bug: multiply NodeCount by Card (StartStates)
 *
 * Revision 3.4  1992/01/07  11:05:57  grosch
 * corrected spelling error
 *
 * Revision 3.3  1991/11/21  14:41:19  grosch
 * fixed bug: interference of right context between constant and non-constant RE
 * new version of RCS on SPARC
 *
 * Revision 3.2  91/09/18  15:05:36  grosch
 * added option to control generation of # line directives
 *
 * Revision 3.1  91/04/08  15:50:20  grosch
 * release memory after use in Classes and Tree0
 *
 * Revision 3.0  91/04/04  18:08:09  grosch
 * introduced partitioning of character set
 *
 * Revision 1.6  91/03/26  18:27:22  grosch
 * improved generation time
 * introduced options n and o to control table size and generation time
 * increased limitation for table size from 64K to 256K
 *
 * Revision 1.5  91/02/13  11:35:15  grosch
 * moved tables from file to initialization in C; reduced case size
 *
 * Revision 1.4  90/06/11  11:28:09  grosch
 * extended character range to 8 bits, ChRange -> CHAR
 *
 * Revision 1.3  90/05/17  11:18:51  grosch
 * cosmetic changes
 *
 * Revision 1.2  89/11/06  12:36:34  grosch
 * renamed module Rex to GenTabs to avoid name clash with rex under VMS
 *
 * Revision 1.1  89/02/23  15:56:10  grosch
 * added include files
 * added help facility
 * improved handling of command line arguments
 *
 * Revision 1.0  88/10/04  11:59:56  grosch
 * Initial revision
 *
 *)

(* Ich, Doktor Josef Grosch, Informatiker, Nov. 1987 *)

MODULE rex;

FROM SYSTEM	IMPORT ADDRESS, ADR;
FROM rSystem	IMPORT GetArgCount, GetArgument, GetEnvVar, tArrayChar, rExit,
			DirectorySeparator, rtpqx, rtpqy;
FROM Strings	IMPORT tString, Assign, AssignEmpty, Append, Concatenate,
			StringToArray, ArrayToString, IsInOrder, Length;
FROM General	IMPORT Max;
FROM Idents	IMPORT MakeIdent;
FROM Position	IMPORT NoPosition;
FROM Errors	IMPORT Message, Fatal, Error, Restriction;
FROM IO		IMPORT tFile, StdOutput, CloseIO, ReadOpen, ReadClose, ReadC,
			EndOfFile;
FROM StdIO	IMPORT WriteI, WriteS, WriteN, WriteC, WriteNl;
FROM Scanner	IMPORT BeginScanner, BeginFile, ErrorCount, Attribute;
FROM Parser	IMPORT Parser, Explicit, SkipWS;
FROM Classes	IMPORT ComputeClasses, ReleaseSetMem, WriteClasses, b,
			ToClassArraySize;
FROM Eval	IMPORT BeginEval, Eval;
FROM Tree	IMPORT WriteTree;
FROM Tree0	IMPORT Tree0Root, WriteTree0, ReleaseTree0Module, DrawTree0;
FROM Dfa	IMPORT LastCh;
FROM GenTabs	IMPORT StartStateCount, LeafCount, NodeCount, Root,
			GenerateTables, Ambiguous, RuleCount;
FROM ScanGen	IMPORT GenerateScanner, GenerateInterface, GenerateSupport,
			Language, tLanguage, RexLib, ScannerFrame, t, y, k, z,
			g;
FROM Times	IMPORT WriteStepTime;

IMPORT Strings;

VAR
   Argument	: ARRAY [0 .. 255] OF CHAR;
   optimize	: SHORTCARD;
   i, n		: SHORTCARD;
   d, s, r, h, w: BOOLEAN;
   draw_tree	: BOOLEAN;
   EnvVarPtr	: tArrayChar;
   String	: tString;
   SourceFile	: ARRAY [0 .. 255] OF CHAR;

PROCEDURE ScanArg (VAR Argument: ARRAY OF CHAR);
   VAR
      ch		: CHAR;
      i, j, size	: CARDINAL;
   BEGIN
      j := 1;
      ch := Argument [0];
      REPEAT
	 IF ch = '-' THEN
	    ch := Argument [j]; INC (j);
	    IF ch = 'l' THEN
	       AssignEmpty (RexLib);
	       LOOP
		  ch := Argument [j]; INC (j);
		  IF ORD (ch) <= ORD (' ') THEN EXIT; END;
		  Append (RexLib, ch);
	       END;
	       Append (RexLib, DirectorySeparator ());
	    ELSIF ch = 'f' THEN
	       AssignEmpty (ScannerFrame);
	       LOOP
		  ch := Argument [j]; INC (j);
		  IF ORD (ch) <= ORD (' ') THEN EXIT; END;
		  Append (ScannerFrame, ch);
	       END;
	    ELSE
	       WHILE ORD (ch) > ORD (' ') DO
		  CASE ch OF
		  | '?': h := TRUE;
		  | 'h': h := TRUE;
		  | 'c': Language := C;
		  | '+': Language := Cpp;
		  | 'm': Language := Modula;
		  | 'e': Language := Eiffel;
		  | 'u': Language := Ada;
		  | 'j': Language := Java;
		  | 'd': d := TRUE;
		  | 's': s := TRUE;
		  | 'r': r := TRUE;
		  | 'a': d := TRUE; s := TRUE;
		  | 'i': LastCh := 255;
		  | 'k':
			ch := Argument [j]; INC (j);
			CASE ch OF
			| '1': k := 1; LastCh := 255;
			| '2': k := 2; LastCh := 65535;
			| '4': k := 4; LastCh := 4294967295;
			ELSE
			   DEC (j);
			   Message ("illegal value for option -k", Error, NoPosition);
			END;
		  | 'z':
			z := TRUE;
			ch := Argument [j]; INC (j);
			size := 0;
			WHILE ('0' <= ch) AND (ch <= '9') DO
			   size := size * 10 + ORD (ch) - ORD ('0');
			   ch := Argument [j]; INC (j);
			END;
			DEC (j);
			ToClassArraySize := Max (size, 256);
		  | 'o': optimize := 16000;
		  | 'n': optimize := 0;
		  | 'w': w := FALSE;
		  | 'g': g := TRUE;
		  | 'b': b := FALSE;
		  | 't': t := TRUE;
		  | 'x': Explicit := TRUE;
		  | 'v': SkipWS := FALSE;
		  | 'p': Ambiguous := TRUE;
		  | 'y': y := TRUE;
		  | 'G': draw_tree := TRUE;
		  | '0' .. '9': n := n * 10 + ORD (ch) - ORD ('0');
		  ELSE
		  END;
		  ch := Argument [j]; INC (j);
	       END;
	    END;
	 ELSIF ch = '?' THEN
	    h := TRUE;
	 ELSIF ORD (ch) > ORD (' ') THEN
	    i := 0;
	    REPEAT
	       SourceFile [i] := ch; INC (i);
	       ch := Argument [j]; INC (j);
	    UNTIL ORD (ch) <= ORD (' ');
	    SourceFile [i] := 0C;
	 ELSIF ch # 0C THEN
	    ch := Argument [j]; INC (j);
	 END;
      UNTIL ch = 0C;
   END ScanArg;

PROCEDURE ToBin (ch: CHAR): INTEGER;
   BEGIN
      CASE ch OF
      | '0' .. '9': RETURN ORD (ch) - ORD ('0');
      | 'A' .. 'F': RETURN ORD (ch) - ORD ('A') + 10;
      | 'a' .. 'f': RETURN ORD (ch) - ORD ('a') + 10;
      END;
      RETURN 0;
   END ToBin;

PROCEDURE WriteMessage (n: INTEGER);
   BEGIN
      CASE n OF
      | 1: Message ("cannot open license file: ctlicens.dat", Fatal, NoPosition);
      | 2: Message ("sorry, the license is expired", Fatal, NoPosition);
      | 3: Message ("sorry, the problem is too big for demo version", Restriction, NoPosition);
      | 4: Message ("license file ctlicens.dat seems corrupted", Fatal, NoPosition);
      END;
   END WriteMessage;

PROCEDURE CheckLicense (tool: ARRAY OF CHAR; Limit: CARDINAL): BOOLEAN;
   VAR
      PathS, String	: tString;
      PathA		: ARRAY [0..128] OF CHAR;
      In		: tFile;
      b			: ARRAY [0..10] OF CHAR;
      p			: tArrayChar;
      y			: ARRAY [0..32] OF BITSET;
      z			: ARRAY [0..32] OF CHAR;
      ch		: CHAR;
      i, k		: CARDINAL;
      s, t		: BITSET;
   BEGIN
      IF rtpqy () THEN RETURN TRUE; END;
      Assign		(PathS, RexLib);
      Append		(PathS, '.');
      Append		(PathS, '.');
      Append		(PathS, DirectorySeparator ());
      ArrayToString	("ctlicens.dat", String);
      Concatenate	(PathS, String);
      Append		(PathS, 0C);
      StringToArray	(PathS, PathA);
      In := ReadOpen	(PathA);
      IF In < 0 THEN WriteMessage (1); RETURN FALSE; END;

      LOOP
	 IF EndOfFile (In) THEN RETURN FALSE; END;
	 i := 0;
	 ch := ReadC (In);
	 WHILE (ch # 12C) AND (ch # 15C) DO
	    y [i] := BITSET (ToBin (ch) * 16 + ToBin (ReadC (In)));
	    INC (i); ch := ReadC (In);
	 END;
	 IF ch = 15C THEN ch := ReadC (In); END;
	 IF ch # 12C THEN WriteMessage (4); RETURN FALSE; END;
	 k := i - 1;

	 s := BITSET (ORD ('j'));
	 FOR i := 0 TO k DO
	    t := y [i] / s; s := s / t; z [i] := CHR (CARDINAL (t));
	 END;
	 IF (z [0] = tool [0]) AND (z [1] = tool [1]) AND (z [2] = tool [2]) THEN EXIT; END;
      END;
      ReadClose (In);

      AssignEmpty (String);
      FOR i := 5 TO 12 DO Append (String, z [i]); END;	(* get license date *)
      b := "%Y%m%d";
      p := rtpqx (b);					(* get current date *)
      i := 0;
      LOOP
	 b [i] := p^ [i];
	 IF (b [i] = 0C) OR (i = 10) THEN EXIT; END;
	 INC (i);
      END;
      ArrayToString (b, PathS);
      IF NOT IsInOrder (PathS, String) THEN WriteMessage (2); RETURN FALSE; END;

      k := 0;
      FOR i := 14 TO 19 DO				(* get license size *)
         IF z [i] # ' ' THEN k := k * 10 + ORD (z [i]) - ORD ('0'); END;
      END;
      IF Limit > k THEN WriteMessage (3); RETURN FALSE; END;
      RETURN TRUE;
   END CheckLicense;

PROCEDURE Usage;
   BEGIN
WriteS ("usage: rex [-options] [-k{124}] [-f<file>] [-l<directory>] [<file>]"); WriteNl; WriteNl;
WriteS (" a generate all (= ds)"					); WriteNl;
WriteS (" c generate a lexical analyzer in C"				); WriteNl;
WriteS (" + generate a lexical analyzer in C++"				); WriteNl;
WriteS (" m generate a lexical analyzer in Modula (default)"		); WriteNl;
WriteS (" u generate a lexical analyzer in Ada"				); WriteNl;
WriteS (" e generate a lexical analyzer in Eiffel"			); WriteNl;
WriteS (" j generate a lexical analyzer in Java"			); WriteNl;
WriteS (" d generate a header file or definition module"		); WriteNl;
WriteS (" s generate support modules:"					); WriteNl;
WriteS ("   . a source module for input"				); WriteNl;
WriteS ("   . a main program to be used as test driver"			); WriteNl;
WriteS (" v do not predefine rules for skipping of white space"		); WriteNl;
WriteS (" x require explicit definitions for used identifiers"		); WriteNl;
WriteS ("   (default: undefined identifiers are treated as strings)"	); WriteNl;
WriteS (" y do not generate dummy labels"				); WriteNl;
WriteS ("   (might cause compiler messages such as 'statement not reached')"); WriteNl;
WriteS ("   (default: generate dummy labels)"				); WriteNl;
WriteS ("   (might cause compiler messages such as 'label not used')"	); WriteNl;
WriteS (" r reduce number of generated case/switch labels"		); WriteNl;
WriteS (" i use ISO 8 bit code (default: ASCII 7 bit code)"		); WriteNl;
WriteS (" -k<n> generate scanner for characters having n bytes (default: 1)"); WriteNl;
WriteS ("   (n > 1 implies -z and disables CHARACTER_SET)"		); WriteNl;
WriteS (" -z[<n>] map characters to classes at run time,"		); WriteNl;
WriteS ("   use an array of n elements, n >= 256 (default: 16384)"	); WriteNl;
WriteS (" o optimize table size"					); WriteNl;
WriteS (" n do not optimize table size"					); WriteNl;
WriteS (" w suppress warnings"						); WriteNl;
WriteS (" g generate # line directives"					); WriteNl;
WriteS (" b do not map characters to classes during generation (implies -k1)"); WriteNl;
WriteS (" t touch output files only if necessary"			); WriteNl;
WriteS (" p print information about ambiguous rules"			); WriteNl;
WriteS (" 1 print statistics about the generated lexical analyzer"	); WriteNl;
WriteS (" h print help information"					); WriteNl;
WriteS (" -f<file> specify a file to be used as skeleton for the scanner"); WriteNl;
WriteS (" -l<dir>  specify the directory dir where rex finds its data files"); WriteNl;
   END Usage;

BEGIN
   d := FALSE;
   s := FALSE;
   r := FALSE;
   h := FALSE;
   w := TRUE;
   g := FALSE;
   b := TRUE;
   t := FALSE;
   y := FALSE;
   z := FALSE;
   draw_tree := FALSE;
   k := 1;
   optimize := 40;
   n := 0;
   ToClassArraySize := 1024 * 16;
   Language := Modula;
   Explicit := FALSE;
   SkipWS := TRUE;
   Ambiguous := FALSE;
   AssignEmpty (RexLib);
   AssignEmpty (ScannerFrame);
   SourceFile [0] := 0C;

   EnvVarPtr := GetEnvVar ("REX");
   IF EnvVarPtr # NIL THEN
      i := 0;
      LOOP
	 Argument [i] := EnvVarPtr^ [i];
	 IF (Argument [i] = 0C) OR (i = 255) THEN EXIT; END;
	 INC (i);
      END;
      ScanArg (Argument);
   END;

   FOR i := 1 TO GetArgCount () - 1 DO
      GetArgument (i, Argument); ScanArg (Argument);
   END;

   IF h THEN
      Usage;
   ELSE
      IF Length (RexLib) = 0 THEN
	 EnvVarPtr := GetEnvVar ("CT_DIR");
	 IF EnvVarPtr # NIL THEN
	    i := 0;
	    LOOP
	       Argument [i] := EnvVarPtr^ [i];
	       IF (Argument [i] = 0C) OR (i = 255) THEN EXIT; END;
	       INC (i);
	    END;
	    ArrayToString (Argument, RexLib);
	    Append (RexLib, DirectorySeparator ());
	    ArrayToString ("lib", String);
	    Concatenate	(RexLib, String);
	    Append (RexLib, DirectorySeparator ());
	    ArrayToString ("rex", String);
	    Concatenate	(RexLib, String);
	    Append (RexLib, DirectorySeparator ());
	 END;
      END;
      IF NOT b THEN k := 1; LastCh := 255; END;
      IF k > 1 THEN z := TRUE; END;
      BeginScanner;
      Attribute.Position := NoPosition;
      IF SourceFile [0] # 0C THEN
	 BeginFile (SourceFile);
	 ArrayToString (SourceFile, String);
      ELSE
	 ArrayToString ("-", String);
      END;
      Attribute.Position.File := MakeIdent (String);
      IF (Parser () = 0) AND (ErrorCount = 0) THEN
	 IF n >= 19 THEN WriteTree0 (StdOutput, Tree0Root); END;
	 IF n >= 2 THEN WriteStepTime ("Parser		"); END;
	 ComputeClasses;
	 IF n >= 18 THEN WriteClasses (); END;
	 IF n >= 2 THEN WriteStepTime ("ComputeClasses	"); END;
	 BeginEval;
	 Eval (Tree0Root);
	 IF n >= 17 THEN WriteTree0 (StdOutput, Tree0Root); END;
	 IF draw_tree THEN DrawTree0 (Tree0Root); END;
	 IF n >= 2 THEN WriteStepTime ("Eval		"); END;
	 LeafCount := StartStateCount + Tree0Root^.List.LeafCount;
	 NodeCount := Tree0Root^.List.NodeCount;
	 Root := Tree0Root^.List.Tree;
	 ReleaseSetMem;
	 ReleaseTree0Module;
	 IF n >= 16 THEN WriteTree (Root); END;
	 IF NOT CheckLicense ("rex", RuleCount) THEN CloseIO; rExit (1); END;
	 GenerateTables (n, r, w, optimize);
	 GenerateScanner (r, w);
      ELSE
	 CloseIO;
	 rExit (1);
      END;
   END;

   IF d THEN GenerateInterface; END;
   IF s THEN GenerateSupport  ; END;
   CloseIO;
   rExit (0);
END rex.
