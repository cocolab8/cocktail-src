(* $Id: r2l.lrk,v 1.3 1997/05/27 15:45:25 grosch rel $ *)

(*
 * $Log: r2l.lrk,v $
 * Revision 1.3  1997/05/27 15:45:25  grosch
 * truncated module names to 8 characters: StringM, Position
 *
 * Revision 1.2  1996/05/14 20:19:53  grosch
 * update to latest version of rex (new syntax)
 *
 * Revision 1.1  1994/07/14  12:39:48  grosch
 * respect that START is a keyword now
 *
 * Revision 1.0  1993/08/17  16:20:27  grosch
 * Initial revision
 *
 *)

(* Ich, Doktor Josef Grosch, Informatiker, Nov. 1987 *)

GLOBAL {

FROM SYSTEM	IMPORT ADR;
FROM Strings	IMPORT tString, ArrayToString;
FROM StringM	IMPORT WriteString;
FROM Idents	IMPORT tIdent, MakeIdent, WriteIdent, GetString;
FROM Texts	IMPORT tText, WriteText;
FROM IO		IMPORT StdOutput;
FROM StdIO	IMPORT WriteC, WriteS, WriteI, WriteNl;
FROM Errors	IMPORT ErrorMessageI;
FROM DefTable	IMPORT NoDef, DefRange, tKind, GetKind, MakeIdentDef, GetDef;

CONST
   IdentUndefined	= 10	;
   ImproperUse		= 11	;
   IdentDefBefore	= 12	;
   Error		= 3	;
   String		= 7	;

TYPE
   tParsAttribute = RECORD Scan: Scanner.tScanAttribute; END;

VAR
   string	: tString;
   ANY		: tIdent;
   Definition	: DefRange;
   complement	: BOOLEAN;
   Import, Export, Global, Local, Begin, Close, Default, Eof: tText;

PROCEDURE WriteChar (Ch: CHAR; InClass: BOOLEAN);
   BEGIN
      IF ('A' <= Ch) AND ( Ch <= 'Z') OR
         ('a' <= Ch) AND ( Ch <= 'z') OR
         ('0' <= Ch) AND ( Ch <= '9') THEN
	 WriteC (Ch);
      ELSE
	 CASE Ch OF
	    | 012C: WriteS ("\n");
	    | 011C: WriteS ("\t");
	    | 013C: WriteS ("\v");
	    | 010C: WriteS ("\b");
	    | 015C: WriteS ("\r");
	    | 014C: WriteS ("\f");
	    | '"' : WriteS ('\"');
	    | ']' : WriteS ("\]");
	    | '.' : WriteS ("\.");
	    | '^' : WriteS ("\^");
	    | '-' : WriteS ("\-");
	    | '\' : WriteS ("\\");
	 ELSE
	    IF InClass THEN
	       WriteC (Ch);
	    ELSE
	       WriteC ('"');
	       WriteC (Ch);
	       WriteC ('"');
	    END;
	 END;
      END;
   END WriteChar;
}

BEGIN { ArrayToString ("ANY", string); ANY := MakeIdent (string); }

TOKEN

   Ident	= 1
   Number	= 2
   String	= 3
   Char		= 4
   TargetCode	= 5
   SCANNER	= 37
   'IMPORT'	= 39
   'EXPORT'	= 32
   'GLOBAL'	= 6
   'LOCAL'	= 31
   'BEGIN'	= 7
   'CLOSE'	= 8
   EOF		= 34
   DEFAULT	= 36
   CHARACTER_SET= 38
   DEFINE	= 9
   \START	= 10
   RULES	= 11
   NOT		= 30
   '.'		= 12
   ','		= 13
   '='		= 14
   ':'		= 15
   ':-'		= 35
   '#'		= 33
   '/'		= 16
   '|'		= 17
   '+'		= 18
   '-'		= 19
   '*'		= 20
   '?'		= 21
   '('		= 22
   ')'		= 23
   '['		= 24
   ']'		= 25
   '{'		= 26
   '}'		= 27
   '<'		= 28
   '>'		= 29

OPER

   LEFT	COMPL
   LEFT	'|'
   LEFT	SEQUENCE
   LEFT	'+' '*' '?' '[' '-'
   LEFT	'(' '{'
   LEFT	Ident Char String Number

RULE

input		: decls
		{ WriteS ("%{"); WriteNl;
		  WriteText (StdOutput, Import);
		  WriteText (StdOutput, Export);
		  WriteText (StdOutput, Global);
		  WriteS ("%}"); WriteNl;
		  WriteNl;
	        }
		  rules
		{ WriteNl; WriteS ("%%"); WriteNl;
		  WriteNl;
		  WriteS ("void BeginScanner ()"); WriteNl;
		  WriteS ("{"); WriteNl;
		  WriteText (StdOutput, Begin);
		  WriteS ("}"); WriteNl;
		  WriteNl;
		  WriteS ("void CloseScanner ()"); WriteNl;
		  WriteS ("{"); WriteNl;
		  WriteText (StdOutput, Close);
		  WriteS ("}"); WriteNl;
		}
		.
decls		:
		| decls name
		| decls code
		| decls character_set
		| decls define
		| decls start
		.
name		: SCANNER
		| SCANNER Ident
		.
code		: 'IMPORT'	TargetCode { Import  := $2.Scan.Text; }
		| 'EXPORT'	TargetCode { Export  := $2.Scan.Text; }
		| 'GLOBAL'	TargetCode { Global  := $2.Scan.Text; }
		| 'LOCAL'	TargetCode { Local   := $2.Scan.Text; }
		| 'BEGIN'	TargetCode { Begin   := $2.Scan.Text; }
		| 'CLOSE'	TargetCode { Close   := $2.Scan.Text; }
		| DEFAULT	TargetCode { Default := $2.Scan.Text; }
		| EOF		TargetCode { Eof     := $2.Scan.Text;
		   WriteS ("/*** sorry - cannot translate EOF ***/"); WriteNl; }
		.
character_set	: CHARACTER_SET '{' codeList '}'
		.
codeList	:
		| codeList char Number
		.
char		: Char
		| Number
		.
define		: DEFINE definitionList
		.
start		: START { WriteNl; WriteS ("%Start"); } identListDef { WriteNl; WriteNl; }
		.
rules		: RULES
		{ WriteS ("%%"); WriteNl;
		  WriteNl;
		  WriteS ("%{"); WriteNl;
		  WriteText (StdOutput, Local);
		  WriteS ("%}"); WriteNl;
		  WriteNl;
		}
		  ruleList
		{ WriteS ('" "	;'); WriteNl;
		  WriteS ("\t	;"); WriteNl;
		  WriteS ("\n	;"); WriteNl;
		  WriteS (".	{");
		  WriteText (StdOutput, Default);
		  WriteS ("}");
		  WriteNl;
		}
		.
definitionList	:
		| definitionList definition
		.
ruleList	:
		| ruleList rule
		.
identListDef	:
		| identListDef IdentDef
		| identListDef ',' IdentDef
		.
IdentDef	: Ident
		{ WriteC (" "); WriteIdent (StdOutput, $1.Scan.Ident); }
		.
identListUse	: IdentUse
		| identListUse     { WriteC (","); } IdentUse
		| identListUse ',' { WriteC (","); } IdentUse
		.
IdentUse	: Ident
		{ WriteIdent (StdOutput, $1.Scan.Ident); }
		.
definition	: Ident '='
		{ IF GetDef ($-1.Scan.Ident) = NoDef THEN
		     MakeIdentDef ($-1.Scan.Ident);
		  ELSE
		     GetString ($-1.Scan.Ident, string);
		     ErrorMessageI (IdentDefBefore, Error, $-1.Scan.Position,
			String, ADR (string));
		  END;
		  WriteIdent (StdOutput, $-1.Scan.Ident); WriteC ("	");
		}
		  regExpr '.' { WriteNl; }
		.
rule		: patternList ':'  { WriteS ("	{"); } TargetCode
		{ WriteText (StdOutput, $4.Scan.Text); WriteC ("}"); WriteNl; }
		| patternList ':-' { WriteS ("	{"); } TargetCode
		{ WriteText (StdOutput, $4.Scan.Text); WriteC ("}"); WriteNl; }
		.
patternList	: pattern
		| patternList ',' { WriteS ("	|"); } pattern
		.
pattern		: startStates leftJust regExpr rightContext rightJust
		.
startStates	:
		| '#' { WriteC ("<"); } identListUse '#' { WriteC (">"); }
		| NOT '#' identListUse '#'
		{ WriteS ("/*** sorry - cannot translate NOT ***/"); WriteNl; }
		.
leftJust	:
		| '<' { WriteC ("^"); }
		.
rightContext	:
		| '/' { WriteC ("/"); } regExpr
		.
rightJust	:
		| '>' { WriteC ("$"); }
		.
regExpr		: regExpr '|' { WriteC ("|"); } regExpr
		| regExpr regExpr PREC SEQUENCE
		| regExpr '+' { WriteC ("+"); }
		| regExpr '*' { WriteC ("*"); }
		| regExpr '?' { WriteC ("?"); }
		| regExpr '[' Number ']'
		{ WriteC ("{"); WriteI ($3.Scan.Number, 0); WriteC (",");
		  WriteI ($3.Scan.Number, 0); WriteC ("}"); }
		| regExpr '[' Number '-' Number ']'
		{ WriteC ("{"); WriteI ($3.Scan.Number, 0); WriteC (",");
		  WriteI ($5.Scan.Number, 0); WriteC ("}"); }
		| '(' { WriteC ("("); } regExpr ')' { WriteC (")"); }
		| compl charSet
		| Char { WriteChar ($1.Scan.Ch, FALSE); }
		| Ident
		{ Definition := GetDef ($1.Scan.Ident);
		  IF Definition # NoDef THEN
		     IF GetKind (Definition) = Ident THEN
			WriteC ("{"); WriteIdent (StdOutput, $1.Scan.Ident); WriteC ("}");
		     ELSE
			GetString ($1.Scan.Ident, string);
			ErrorMessageI (ImproperUse, Error, $1.Scan.Position,
			   String, ADR (string));
		     END;
		  ELSE
		     IF $1.Scan.Ident = ANY THEN
			WriteC (".");
		     ELSE
			WriteIdent (StdOutput, $1.Scan.Ident);
		     END;
		  END;
		}
		| String
		{ WriteC ('"'); WriteString (StdOutput, $1.Scan.String); WriteC ('"'); }
		| Number
		{ WriteI ($1.Scan.Number, 0); }
		.
compl		: { complement := FALSE; } PREC COMPL .
charSet		: '-' { complement := NOT complement; } charSet
		| '{' { WriteC ("["); IF complement THEN WriteC ("^"); END; }
		  rangeList '}' { WriteC ("]"); }
		.
rangeList	:
		| rangeList range
		.
range		: Char { WriteChar ($1.Scan.Ch, TRUE); }
		| Char '-' { WriteChar ($-1.Scan.Ch, TRUE); WriteC ("-"); }
		  Char { WriteChar ($4.Scan.Ch, TRUE); }
		.
