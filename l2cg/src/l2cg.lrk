/* $Id: l2cg.lrk,v 1.8 2013/01/15 13:32:50 grosch Exp $ */

/*
 * $Log: l2cg.lrk,v $
 * Revision 1.8  2013/01/15 13:32:50  grosch
 * improved layout of generated grammar
 *
 * Revision 1.7  2008/08/25 13:10:13  grosch
 * cared for pointer operations on 64 bit platforms: introduced module Pointers
 *
 * Revision 1.6  2002/05/24 20:22:23  grosch
 * update to recent language extensions
 *
 * Revision 1.5  1997/05/27 15:47:12  grosch
 * truncated module names to 8 characters: StringM, Position
 *
 * Revision 1.4  1996/07/04 09:09:02  grosch
 * added syntax for predicates
 *
 * Revision 1.3  1995/02/23  20:00:40  grosch
 * improved START phrase
 *
 * Revision 1.2  1995/02/06  13:06:16  grosch
 * added escape for keywords
 *
 * Revision 1.1  1994/02/23  22:15:57  grosch
 * deleted unused objects
 *
 * Revision 1.0  1993/08/17  16:27:44  grosch
 * Initial revision
 *
 */

GLOBAL
{
FROM Scanner	IMPORT GetToken, tScanAttribute, Attribute, ErrorAttribute;
FROM Strings	IMPORT AssignEmpty, tString, Length, ArrayToString;
FROM StringM	IMPORT PutString, tStringRef, WriteString;
FROM SYSTEM	IMPORT ADR, ADDRESS;
FROM Pointers	IMPORT PTRINT;
FROM IO		IMPORT StdOutput;
FROM StdIO	IMPORT WriteS, WriteC, WriteNl, CloseIO;
FROM Idents	IMPORT NoIdent, tIdent, MakeIdent, MaxIdent, GetString, WriteIdent;
FROM Lists	IMPORT tList, Head, Tail, IsEmpty;

TYPE tParsAttribute = RECORD Scan: tScanAttribute; END;

VAR String	: tString;
VAR Count	: INTEGER;
VAR OldId	: tIdent;
VAR Done	: BOOLEAN;
VAR Rule	: BOOLEAN;
VAR Keyword	: tIdent;

PROCEDURE WriteId (Ident: tIdent);
   BEGIN
      IF Ident <= Keyword THEN WriteC ("\"); END;
      WriteIdent (StdOutput, Ident);
   END WriteId;

PROCEDURE WriteText (Text: tList);
   BEGIN
      IF NOT IsEmpty (Text) THEN
	 WriteString (StdOutput, tStringRef (PTRINT (Head (Text))));
	 Tail (Text);
      END;
      WHILE NOT IsEmpty (Text) DO
	 WriteNl;
	 WriteString (StdOutput, tStringRef (PTRINT (Head (Text))));
	 Tail (Text);
      END;
   END WriteText;
}

BEGIN {
   OldId := NoIdent; Count := 0; Done := TRUE; Rule := FALSE;

   ArrayToString ("BEGIN"	, String); Keyword := MakeIdent (String);
   ArrayToString ("CLOSE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("DECLARE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("DEMAND"	, String); Keyword := MakeIdent (String);
   ArrayToString ("END"		, String); Keyword := MakeIdent (String);
   ArrayToString ("EVAL"	, String); Keyword := MakeIdent (String);
   ArrayToString ("EXPORT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("FOR"		, String); Keyword := MakeIdent (String);
   ArrayToString ("FUNCTION"	, String); Keyword := MakeIdent (String);
   ArrayToString ("GLOBAL"	, String); Keyword := MakeIdent (String);
   ArrayToString ("IGNORE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("IMPORT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("IN"		, String); Keyword := MakeIdent (String);
   ArrayToString ("INH"		, String); Keyword := MakeIdent (String);
   ArrayToString ("INHERITED"	, String); Keyword := MakeIdent (String);
   ArrayToString ("INPUT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("LEFT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("LOCAL"	, String); Keyword := MakeIdent (String);
   ArrayToString ("MODULE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("NONE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("OUT"		, String); Keyword := MakeIdent (String);
   ArrayToString ("OUTPUT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("PARSER"	, String); Keyword := MakeIdent (String);
   ArrayToString ("PREC"	, String); Keyword := MakeIdent (String);
   ArrayToString ("PROPERTY"	, String); Keyword := MakeIdent (String);
   ArrayToString ("REV"		, String); Keyword := MakeIdent (String);
   ArrayToString ("REVERSE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("RIGHT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("RULE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("SCANNER"	, String); Keyword := MakeIdent (String);
   ArrayToString ("SELECT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("STACK"	, String); Keyword := MakeIdent (String);
   ArrayToString ("START"	, String); Keyword := MakeIdent (String);
   ArrayToString ("SUBUNIT"	, String); Keyword := MakeIdent (String);
   ArrayToString ("SYN"		, String); Keyword := MakeIdent (String);
   ArrayToString ("SYNTHESIZED"	, String); Keyword := MakeIdent (String);
   ArrayToString ("THREAD"	, String); Keyword := MakeIdent (String);
   ArrayToString ("TREE"	, String); Keyword := MakeIdent (String);
   ArrayToString ("VIEW"	, String); Keyword := MakeIdent (String);
   ArrayToString ("VIRTUAL"	, String); Keyword := MakeIdent (String);
   ArrayToString ("VOID"	, String); Keyword := MakeIdent (String);

   Keyword := MaxIdent ();
}

TOKEN
  '='		=  1
  ':'		=  2
  '.'		=  3
  '|'		=  4
  '*'		=  5
  '+'		=  6
  '||'		=  7
  '('		=  8
  ')'		=  9
  '['		= 10
  ']'		= 11
  'EXPORT'	= 12
  'GLOBAL'	= 13
  'LOCAL'	= 14
  'BEGIN'	= 15
  'CLOSE'	= 16
  'TOKEN'	= 17
  'OPER'	= 18
  'NONE'	= 19
  'LEFT'	= 20
  'RIGHT'	= 21
  'RULE'	= 22
  'PREC'	= 23
  Comment	= 24 (* Schreibweise wie in MODULA-2		    *)
  Number	= 25 (* vorzeichenlose ganze Zahl		    *)
  Action	= 26 (* mit '{' und '}'eingeschlossene Zeichenkette *)
  Identifier	= 27 (* letter (digit|letter)*			    *)
  String	= 28 (* durch ' oder " begrenzte Zeichenkette	    *)
  'SCANNER'	= 29
  'PARSER'	= 30
  'START'	= 31
  ','		= 32
  '?'		= 33
  '-'		= 34
  'IMPORT'	= 35

RULE

Grammar		: Decls RulePart { WriteNl; WriteS ("> . "); WriteNl; }
		.
Decls		:
		| Decls Comment {
		  WriteNl; WriteS ("/*"); WriteText ($2.Scan.Comm); WriteS ("*/"); WriteNl; WriteNl;
		  }
		| Decls ScannerName
		| Decls ParserName
		| Decls Codes
		| Decls TokenPart
		| Decls PrecPart
		| Decls StartPart
		.
ScannerName	: 'SCANNER'
		| 'SCANNER' DottedIdentifier
		.
ParserName	: 'PARSER'
		| 'PARSER' DottedIdentifier
		.
DottedIdentifier: DottedIdentifier '.' Identifier
		| Identifier
		.
Codes		: 'IMPORT' CommentPart Action
		| 'EXPORT' CommentPart Action
		| 'GLOBAL' CommentPart Action
		| 'LOCAL'  CommentPart Action
		| 'BEGIN'  CommentPart Action
		| 'CLOSE'  CommentPart Action
		.
TokenPart	: 'TOKEN' Tokens
		.
Tokens		:
		| Tokens Terminal Code Cost
		| Tokens Terminal Code Repr
		| Tokens Comment
		.
Code		:
		| Number
		| '=' Number
		.
Cost		:
		| ',' Number
		| ',' Number ',' String
		.
Repr		: ',' String
		| ',' String ',' Number
		.
PrecPart	: 'OPER' { WriteNl; WriteS ("PREC"); WriteNl; Rule := TRUE; } Precedences
		.
Precedences	:
		| Precedences Precedence
		| Precedences Comment
		.
Precedence	: Associativity Terminals { WriteNl; }
		.
Associativity	: 'LEFT'	{ WriteS ("  LEFT	"); }
		| 'RIGHT'	{ WriteS ("  RIGHT	"); }
		| 'NONE'	{ WriteS ("  NONE	"); }
		.
Terminals	:
		| Terminals Terminal
		.
Terminal	: Identifier { IF Rule THEN WriteS (" "); WriteId ($1.Scan.Ident); END; }
		| String { IF Rule THEN WriteS (" "); WriteId ($1.Scan.Ident); END; }
		.
StartPart	: 'START' { WriteNl; WriteS ("START"); } Nonterminals { WriteNl; }
		.
Nonterminals	:
		| Nonterminals Identifier Comma_opt { WriteS (" "); WriteId ($2.Scan.Ident); }
		.
Comma_opt	:
		| ','
		.
RulePart	: 'RULE' { WriteNl; WriteS ("RULE"); WriteNl; WriteNl; Rule := TRUE; } CommentPart Rule *
		.
Rule		: Identifier {
		  IF $0.Scan.Ident # OldId THEN
		     OldId := $0.Scan.Ident;
		     IF NOT Done THEN
		     (*	IF Count = 1 THEN WriteS (" /* 1 */"); END; *)
			WriteNl; WriteS ("> ."); WriteNl;
		     END;
		     Done := FALSE;
		     WriteId ($0.Scan.Ident);
		     GetString ($0.Scan.Ident, String);
		     IF Length (String) <= 7 THEN WriteS ("	= <");
		     ELSE WriteS (" = <"); END;
		     WriteNl;
		     Count := 1;
		  ELSE
		     INC (Count); WriteNl;
		  END;
		  WriteS ("	=");
		  } ':' RightSide '.' { WriteS (" ."); } CommentPart
		.
RightSide	: Expressions { WriteS (" ."); } '|' {
		  WriteNl; WriteS ("	="); INC (Count);
		  } RightSide
		| Expressions
		.
Expressions	: Expression Expressions
		|
		.
Expression	: Unit
		| Unit '*'
		| Unit '+'
		| Unit '||' Unit
		.
Unit		: '[' Alternative ']'
		| '(' Alternative ')'
		| Identifier	{ WriteS (" "); WriteId ($1.Scan.Ident); }
		| String	{ WriteS (" "); WriteId ($1.Scan.Ident); }
		| Action	{ WriteS (" "); WriteText ($1.Scan.Act); }
		| 'PREC'	{ WriteS (" PREC"); } Terminal
		| '?' Action	{ WriteS (" ? "); WriteText ($2.Scan.Act); }
		| '?' '-' Action{ WriteS (" ? - "); WriteText ($2.Scan.Act); }
		| '?'		{ WriteS (" ?"); } Terminal
		| '?' '-'	{ WriteS (" ? -"); } Terminal
		.
Alternative	: Expressions '|' Alternative
		| Expressions
		.
CommentPart	:
		| CommentPart Comment {
		  IF NOT Done THEN
		     Done := TRUE;
		  (* IF Count = 1 THEN WriteS (" /* 1 */"); END; *)
		     WriteNl; WriteS ("> ."); WriteNl;
		  END;
		  WriteNl; WriteS ("/*"); WriteText ($2.Scan.Comm); WriteS ("*/"); WriteNl; WriteNl;
		  }
		.
