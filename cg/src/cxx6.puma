/* Ich, Doktor Josef Grosch, Informatiker, 10.8.1993 */

TRAFO	EvalCxx4
TREE	Tree
PUBLIC	EvalImplCxx

GLOBAL {

FROM SYSTEM	IMPORT ADR, TSIZE;
FROM General	IMPORT Max;
FROM DynArray	IMPORT MakeArray;
FROM IO		IMPORT WriteS, WriteNl;
FROM StringM	IMPORT Length, WriteString;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement;
FROM TreeCxx1	IMPORT BSS;
FROM TreeCxx2	IMPORT WriteLine;
FROM EvalCxx	IMPORT Class, yyMax, WC;
FROM EvalCxx3	IMPORT ToBit0;
IMPORT EvalCxx;

FROM Tree	IMPORT
   NoTree	, tTree		, Child		,
   Computed	, Reverse	, Write		, Read		,
   Inherited	, Synthesized	, Input		, Output	,
   Stack	, Variable	, NoCodeClass	, iNoTree	,
   Thread	, Virtual	, 
   Test		, Left		, Right		, ClassCount	,
   NonBaseComp	, First		, Dummy		, Trace		,
   Options	, TreeRoot	, iMain		,
   itTree	, ForallClasses	, f		, WI, WN	,
   IdentifyClass, IdentifyAttribute, GrammarClass, cOAG		,
   MaxVisit	;

CONST BlockSize	= 256;

TYPE tMapDown	= POINTER TO ARRAY [0..100000] OF SHORTCARD;

VAR
   i, n, k	: SHORTCARD;
   ConstCount	,
   j, Visit	: INTEGER;
   Node		,
   Attr		,
   ChildsClass	: tTree;
   MapDownBasePtr	: POINTER TO ARRAY [0..100000] OF tMapDown;
   MapDownMaxPtr	: POINTER TO ARRAY [0..100000] OF SHORTCARD;
   MapDownBaseSize	,
   MapDownSize	: LONGINT;
}

PROCEDURE EvalImplCxx (t: Tree)
	
Ag (..) :- {
	!# ifndef EXTERN_C_BEGIN!
	!# define EXTERN_C_BEGIN!
	!# define EXTERN_C_END!
	!# endif!
	!!
	!EXTERN_C_BEGIN!
	@# include "DynArray.h"@
	!EXTERN_C_END!
	EvalCxx.EvalImplHead (t);
	!static char * yyCheck2 = & generate_! WI (iMain); !_module_without_option_0;!
	!!
	MapDownBaseSize := MaxVisit + 1;
	MakeArray (MapDownBasePtr, MapDownBaseSize, TSIZE (tMapDown));
	MakeArray (MapDownMaxPtr, MapDownBaseSize, TSIZE (SHORTCARD));
	MapDownSize := ClassCount + 1;
	FOR i := 1 TO MaxVisit DO
	   MakeArray (MapDownBasePtr ^[i], MapDownSize, TSIZE (SHORTCARD));
	   FOR j := 1 TO ClassCount DO MapDownBasePtr ^[i]^[j] := 0; END;
	   MapDownMaxPtr ^[i] := 0;
	   !extern const short ! WI (EvalName); !_MapDown! WN (i); ! [];!
	END;
	!!
	!# define yyInitStackSize 100!
	!!
	!typedef struct { ! WI (itTree); ! yyt; int yyn; } yytStack;!
	!static yytStack * yyStack, * yyStackPtr, * yyEndOfStack;!
	!static unsigned long yyStackSize = yyInitStackSize;!
	!!
	n := 0;
	ConstCount := 0;
	GenHead (t);
	ForallClasses (Classes, GenEvaluator);
	IF n MOD BlockSize # 0 THEN
	   n := (n DIV BlockSize + 1) * BlockSize;
	   GenTail (t);
	   DEC (n);
	END;
	yyMax := n DIV BlockSize;
      IF yyMax > 0 THEN
	!# ifndef _MSC_VER!
	!typedef ! WI (itTree); ! (* yytP) (! WI (itTree); !);!
	!static const yytP yyP [! WN (yyMax + 1); !] = { ! 
	FOR i := 0 TO yyMax DO
	    !yy! WN (i); !, ! 
	END;
	!};!
	!# endif!
      END;
	!!
	!void ! WI (EvalName); ! (register ! WI (itTree); ! yyt)!
	!{!
      IF IsElement (ORD ('X'), Options) THEN
	! if (yyf == NULL) yyf = stdout;!
      END;
	! MakeArray ((char * *) & yyStack, & yyStackSize, (unsigned long) sizeof (yytStack));!
	! yyStackPtr	 = yyStack;!
	! yyEndOfStack	 = & yyStack [yyStackSize];!
	! yyStackPtr->yyt = yyt;!
	! yyStackPtr->yyn = ! WI (EvalName); !_MapDown1 [yyt->Kind];!
	!!
	IF yyMax = 0 THEN
	   @ do yyt = yy0 (yyt); while (yyt != @ WI (iNoTree); @);@
	ELSE
	   !# ifdef _MSC_VER!
	   ! do {!
	   !  switch (yyStackPtr->yyn / ! WN (BlockSize); !) {!
	   FOR i := 0 TO yyMax DO
	   !   case ! WN (i); !: yyt = yy! WN (i); ! (yyt); break;!
	   END;
	   !  }!
	   @ } while (yyt != @ WI (iNoTree); !);!
	   !# else!
	   ! do yyt = yyP [yyStackPtr->yyn / ! WN (BlockSize); @] (yyt); while (yyt != @ WI (iNoTree); !);!
	   !# endif!
	END;
	! ReleaseArray ((char * *) & yyStack, & yyStackSize, (unsigned long) sizeof (yytStack));!
      IF IsElement (ORD ('9'), Options) THEN
	@ printf ("Stacksize %ld\n", yyStackSize * sizeof (yytStack));@
      END;
	!}!
	!!
	FOR i := 1 TO MaxVisit DO
	   !const short ! WI (EvalName); !_MapDown! WN (i); ! [] = { 0,!
	   FOR k := 1 TO MapDownMaxPtr ^[i] DO
	      WN (MapDownBasePtr ^[i]^[k]); !,!
	   END;
	   !};!
	END;
	!!
	EvalCxx.EvalImplTail (t);
}; .

PROCEDURE GenHead (t: Tree)

.. :-
	!static ! WI (itTree); ! yy! WN (n DIV BlockSize); ! (register ! WI (itTree); ! yyt)!
	!{!
	! register const short * yyMapDown;!
	WriteLine (TreeRoot^.Ag.EvalCodes^.Codes.LocalLine);
	WriteText (f, TreeRoot^.Ag.EvalCodes^.Codes.Local);
	Node := TreeRoot^.Ag.Modules;
{	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Local);
	   Node := Node^.Module.Next;
	END;
};
	! for (;;) {!
	!  switch (yyStackPtr->yyn) {!
	!  case ! WN (n); !:!
	.

PROCEDURE GenTail (t: Tree)

.. :-
	!!
	!  default: return yyt;!
	!!
	!  yyVisit: yyStackPtr->yyn ++;!
	!   if (++ yyStackPtr == yyEndOfStack) {!
	!    long yyyStackPtr = yyStackPtr - yyStack;!
	!    ExtendArray ((char * *) & yyStack, & yyStackSize, (unsigned long) sizeof (yytStack));!
	!    yyStackPtr = yyStack + yyyStackPtr;!
	!    yyEndOfStack = & yyStack [yyStackSize];!
	!   }!
	!   yyStackPtr->yyt = yyt;!
	!   yyStackPtr->yyn = yyMapDown [yyt->Kind]; continue;!
	!!
	!  yyParent:! 
{     IF IsElement (ORD ('Z'), Options) THEN
	! yyVisitParent (yyt);! 
      END;
};
	! if (yyStackPtr == yyStack) return ! WI (iNoTree); !; yyt = (-- yyStackPtr)->yyt;!
	!  }!
	! }!
	! return ! WI (iNoTree); !;!
	!}!
	!!
	.

PROCEDURE GenCase (t: Tree)

.. :- {
	INC (n);
	IF n MOD BlockSize = 0 THEN
	   GenTail (t);
	   GenHead (t);
	ELSE
	   !  case ! WN (n); !:!
	END;
}; .

PROCEDURE GenEvaluator (t: Tree)

Class (..) :-
	CONDITION NoCodeClass * Properties = {{}};
{	
	INC (ConstCount);
	Visit := 1; MapDownBasePtr ^[1]^[ConstCount] := n;
	MapDownMaxPtr ^[1] := Max (MapDownMaxPtr ^[1], ConstCount);
	Class := t;
	i := 1;			(* skip initial inherited attributes of left-hand side	*)
	LOOP
	   WITH Instance^ [Instance^ [i].Order] DO
	      IF i > InstCount THEN EXIT; END;
	      IF ({Inherited, Left} <= Properties) OR (Input IN Properties) THEN
		 INC (i);
	      ELSE
		 EXIT;
	      END;
	   END;
	END;
	FOR i := i TO InstCount DO
	   WITH Instance^ [Instance^ [i].Order] DO
	      IF ({Inherited, Right, First} <= Properties) AND NOT (Virtual IN Properties) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END; !!
		 IF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    !write! WI (itTree);
		 ELSE
		    !write! WI (Attribute^.Child.Type);
		 END;
		 ! ((! WC (Name); !yyt)->! WI (Selector^.Child.Name);
		 !->! WI (Attribute^.Child.Name); !) xxWriteNl ();!
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Left, First} <= Properties) AND ({Dummy, Virtual} * Properties = {}) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END; !!
		 IF Test IN Properties THEN
		    !writebool (yyb) xxWriteNl ();!
		 ELSIF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    !write! WI (itTree);
		    ! ((! WC (Name); !yyt)->! WI (Attribute^.Child.Name); !) xxWriteNl ();!
		 ELSE
		    !write! WI (Attribute^.Child.Type);
		    ! ((! WC (Name); !yyt)->! WI (Attribute^.Child.Name); !) xxWriteNl ();!
		 END;
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Right, First} <= Properties) AND
		 (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits) THEN
      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteVisit (yyt, "@ WI (Selector^.Child.Name); ! ! 
		 WN (Attribute^.Child.Partition); @");@
      END;
		 !yyt = (! WC (Name); !yyt)->! WI (Selector^.Child.Name); !;! 
		 ! yyMapDown = ! WI (TreeRoot^.Ag.EvalName); !_MapDown! WN (Attribute^.Child.Partition); !;! 
		 ! goto yyVisit;!
		 GenCase (t);
	      END;
	      IF ({Inherited, Left, First} <= Properties) THEN
		 !   goto yyParent;!
		 GenCase (t);
		 INC (Visit); MapDownBasePtr ^[Visit]^[ConstCount] := n;
		 MapDownMaxPtr ^[Visit] := Max (MapDownMaxPtr ^[Visit], ConstCount);
	      END;
	   END;
	END;
	!   goto yyParent;!
	IF ConstCount < ClassCount THEN
	   GenCase (t);
	END;
}; .
Assign (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); !=! GenEvaluator (Arguments); !;!
}; .
Copy (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); !=! GenEvaluator (Arguments); !;!
}; .
TargetCode (..) :- {
	WriteLine (Pos);
	GenEvaluator (Code); !!
}; .
Check (..) :- {
	WriteLine (Pos);
	IF Condition # NoTree THEN
	   @if (! (@ 
      IF IsElement (ORD ('X'), Options) THEN
	   !yyb = ! 
      END;
	   GenEvaluator (Condition); !)) {! GenEvaluator (Statement); !; }!
	   IF Actions^.Kind = Tree.Check THEN
	      !else!
	      GenEvaluator (Actions);
	   END;
	ELSE
      IF IsElement (ORD ('X'), Options) THEN
	   !yyb = false; ! 
      END;
	   GenEvaluator (Statement); !;!
	   GenEvaluator (Actions);
	END;
}; .
Designator (..) :- {
	Attr := IdentifyAttribute (Class, Selector);
	IF Attr # NoTree THEN
	   ChildsClass := Attr^.Child.Class;
	   Attr := IdentifyAttribute (ChildsClass, Attribute);
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      !(! WC (Class^.Class.Name); !yyt)->! WI (Selector); !->! 
	      WI (Attribute);
	   END;
	ELSE
	   WI (Selector); !:! WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Ident (..) :- {
	Attr := IdentifyAttribute (Class, Attribute);
	IF Attr # NoTree THEN
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      !(! WC (Class^.Class.Name); !yyt)->! WI (Attribute);
	   END;
	ELSE
	   WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Remote (..) :-
   TheClass: Class; k: INTEGER;
   TheClass := IdentifyClass (TreeRoot^.Ag.Classes, Type);
{  IF TheClass # NoTree THEN
      Attr := IdentifyAttribute (TheClass, Attribute);
      IF Attr # NoTree THEN
	 WITH Attr^.Attribute DO
	    k := ToBit0 (TheClass, AttrIndex);
	    IF Synthesized IN Properties THEN
	       !REMOTE_SYN (yyIsComp! WN (k DIV BSS); !, ! WN (k MOD BSS); !, yyS! WN (k); !, ! 
	       GenEvaluator (Designators); !, ! WI (t^.Remote.Type); !, ! WI (Attribute); !)! 
	    ELSIF Inherited IN Properties THEN
	       !REMOTE_INH (yyIsComp! WN (k DIV BSS); !, ! WN (k MOD BSS); !, ! WN (k); !, ! 
	       GenEvaluator (Designators); !, ! WI (t^.Remote.Type); !, ! WI (Attribute); !)! 
	    ELSE
	       !(! WC (t^.Remote.Type); GenEvaluator (Designators); !)->! WI (Attribute);
	    END;
	 END;
      END;
   END;
   GenEvaluator (Next);
}; .
Any (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .
Anys (..) :- {
	GenEvaluator (Layouts);
	GenEvaluator (Next);
}; .
LayoutAny (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .
