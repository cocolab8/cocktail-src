/* Ich, Doktor Josef Grosch, Informatiker, 23.5.1989 */

TRAFO EvalC
TREE Tree
PUBLIC EvalDefC EvalImplC EvalImplHead EvalImplTail GenEvaluator ClassPrefix2 ExternPrefix

EXPORT { VAR Class: Tree.tTree; yyMax: SHORTCARD; }

GLOBAL {

FROM SYSTEM	IMPORT ADR;
FROM IO		IMPORT WriteS, WriteN, WriteNl;
FROM StringM	IMPORT Length, WriteString;
FROM Idents	IMPORT tIdent, GetStringRef;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement;
FROM Semantic	IMPORT CodeClass;
FROM TreeC1	IMPORT BSS;
FROM TreeC2	IMPORT WriteLine;
FROM EvalC3	IMPORT ToBit0;

FROM Tree	IMPORT
   NoTree	, tTree		, Child		, ClassCount	,
   Computed	, Reverse	, Write		, Read		,
   Inherited	, Synthesized	, Input		, Output	,
   Stack	, Variable	, NoCodeClass	,
   CopyDef	, CopyUse	, Thread	, Virtual	, 
   Test		, Left		, Right		,
   NonBaseComp	, First		, Dummy		, Trace		,
   Options	, TreeRoot	, iMain		,
   itTree	, ForallClasses	, f		, WI, WP, WN	,
   IdentifyClass, IdentifyAttribute, GrammarClass, cOAG		,
   MaxVisit	;

VAR
   n		: SHORTCARD;
   Node		,
   Attr		,
   ChildsClass	: tTree;
}

PROCEDURE ClassPrefix2 ()

:- CONDITION IsElement (ORD ('+'), Options); WI (TreeRoot^.Ag.EvalName); !::! .

PROCEDURE ExternPrefix ()

:- CONDITION NOT IsElement (ORD ('+'), Options); !extern ! .

PROCEDURE EvalDefC (t: Tree)

Ag (..) :- {
	!# ifndef yy! WI (EvalName); !!
	!# define yy! WI (EvalName); !!
	!!
/*
	!# ifdef HAVE_ARGS!
	!# else!
	!# define const!
	!# endif!
	!!
*/
	@# include "ratc.h"@
	@# include "@ WI (iMain); @.h"@
	!!
	WriteLine (EvalCodes^.Codes.ImportLine);
	WriteText (f, EvalCodes^.Codes.Import);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.ImportLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Import);
	   Node := Node^.Module.Next;
	END;
	WriteLine (EvalCodes^.Codes.ExportLine);
	WriteText (f, EvalCodes^.Codes.Export);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.ExportLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Export);
	   Node := Node^.Module.Next;
	END;
	!!
      IF IsElement (ORD ('+'), Options) THEN
	 IF IsElement (ORD ('K'), Options) THEN
	!typedef struct { ! WI (itTree); ! yyt; int yyn; } yytStack;!
	!!
	 END;
	!class ! WI (EvalName); ! {!
	!public:!
	ExternPrefix; !void Evaluate ARGS ((! WI (itTree); ! yyt));!
      ELSE
	ExternPrefix; !void ! WI (EvalName); ! ARGS ((! WI (itTree); ! yyt));!
      END;
	ExternPrefix; !void Begin! WI (EvalName); ! ARGS ((void));!
	ExternPrefix; !void Close! WI (EvalName); ! ARGS ((void));!
      IF IsElement (ORD ('+'), Options) THEN
	WI (EvalName); ! (void);!
	!~! WI (EvalName); ! (void);!
	!!
	!private:!
	 IF IsElement (ORD ('K'), Options) THEN
	!yytStack * yyStack, * yyStackPtr, * yyEndOfStack;!
	!unsigned long yyStackSize;!
	IF yyMax > 0 THEN
	   !# ifndef _MSC_VER!
	   !typedef ! WI (itTree); ! (! WI (EvalName); !:: * yytP) (! WI (itTree); !);!
	   !yytP yyP [! WN (yyMax + 1); !];!
	   !# endif!
	END;
	FOR n := 0 TO yyMax DO
	   WI (itTree); ! yy! WN (n); ! (register ! WI (itTree); ! yyt);!
	END;
	 END;
	!};!
      END;
	!!
	!# endif!
}; .

PROCEDURE EvalImplHead (t: Tree)

Ag (..) :- {
	!# define DEP(a, b) a!
	!# define SELF yyt!
	!!
	!# ifndef EXTERN_C_BEGIN!
	!# define EXTERN_C_BEGIN!
	!# define EXTERN_C_END!
	!# endif!
	!!
	@# include "@ WI (EvalName); @.h"@
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) OR
         IsElement (ORD ('L'), Options) THEN
	@# include <stdio.h>@
      END;
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) THEN
	!EXTERN_C_BEGIN!
	@# include "rString.h"@
	@# include "Idents.h"@
	@# include "Sets.h"@
	!EXTERN_C_END!
      END;
      IF IsElement (ORD ('9'), Options) THEN
	!EXTERN_C_BEGIN!
	@# include "General.h"@
	!EXTERN_C_END!
	!!
	!static char * yyMinLow;!
      END;
	WriteLine (EvalCodes^.Codes.GlobalLine);
	WriteText (f, EvalCodes^.Codes.Global);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.GlobalLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Global);
	   Node := Node^.Module.Next;
	END;
	!!
      IF IsElement (ORD ('X'), Options) THEN
	@# include "yy@ WI (iMain); @.h"@
	!# define yyWrite! WI (iMain); !(a) Write! WI (iMain); ! (yyf, a)!
	!!
	!static char yyb;!
      END;
      IF IsElement (ORD ('Y'), Options) OR
         IsElement (ORD ('Z'), Options) THEN
	!!
	!# define yyTrace	rtrue!
	!!
	!static const char * const yyTypeName [! WN (ClassCount + 1); !] = { 0,!
	ForallClasses (Classes, TypeName);
	!};!
	!!
	!static void yyWriteType!
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt)!
	!# else!
	! (yyt) ! WI (itTree); ! yyt;!
	!# endif!
	!{!
	! const char * yys = yyTypeName [yyt->Kind];!
	! register int yyi = 16 - strlen (yys);!
	@ printf ("%s", yys);@
	! while (yyi -- > 0) putc (' ', stdout);!
	!}!
      END;
      IF IsElement (ORD ('X'), Options) THEN
	!!
	!static FILE * yyf = NULL;!
	!!
	!static void yyWriteHex!
	!# ifdef HAVE_ARGS!
	! (unsigned char * yyx, int yysize)!
	!# else!
	! (yyx, yysize) unsigned char * yyx; int yysize;!
	!# endif!
	@{ register int yyi; for (yyi = 0; yyi < yysize; yyi ++) printf ("%02x ", yyx [yyi]); }@
	!!
	!static void xxWriteNl ARGS ((void)) { if (yyTrace) { putc ('\n', stdout); fflush (stdout); } }!
      END;
      IF IsElement (ORD ('X'), Options) THEN
	!!
	!static void yyWriteEval!
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt, char * yys)!
	!# else!
	! (yyt, yys) ! WI (itTree); ! yyt; char * yys;!
	!# endif!
	!{!
	! if (yyTrace) {!
	!  register int yyi = 24 - strlen (yys);!
	!  yyWriteType (yyt);!
	@  printf (" e %s", yys);@
	!  while (yyi -- > 0) putc (' ', stdout);!
	@  printf (" = ");@
	!  fflush (stdout);!
	! }!
	!}!
      ELSIF IsElement (ORD ('Y'), Options) THEN
	!!
	!static void yyWriteEval!
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt, char * yys)!
	!# else!
	! (yyt, yys) ! WI (itTree); ! yyt; char * yys;!
	!# endif!
	!{!
	! if (yyTrace) {!
	!  yyWriteType (yyt);!
	@  printf (" e %s\n", yys);@
	!  fflush (stdout);!
	! }!
	!}!
      END;
      IF IsElement (ORD ('Z'), Options) THEN
	!!
	!static void yyWriteVisit!
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt, char * yys)!
	!# else!
	! (yyt, yys) ! WI (itTree); ! yyt; char * yys;!
	!# endif!
	!{!
	! if (yyTrace) {!
	!  yyWriteType (yyt);!
	@  printf (" v %s\n", yys);@
	!  fflush (stdout);!
	! }!
	!}!
	!!
	!static void yyVisitParent!
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt)!
	!# else!
	! (yyt) ! WI (itTree); ! yyt;!
	!# endif!
	@{ yyWriteVisit (yyt, "parent"); }@
      END;
	!!
	!# ifdef YYCHECK!
	!static char * yyCheck1 = & !WI (iMain); !_module_does_not_match_evaluator_module_! WriteN (f, CodeClass, 0, 10); !;!
	!# endif!
}; .

PROCEDURE EvalImplTail (t: Tree)

Ag (..) :- {
	!void ! ClassPrefix2; !Begin! WI (EvalName); ! ARGS ((void))!
	!{!
	WriteLine (EvalCodes^.Codes.BeginLine);
	WriteText (f, EvalCodes^.Codes.Begin);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.BeginLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Begin);
	   Node := Node^.Module.Next;
	END;
	!}!
	!!
	!void ! ClassPrefix2; !Close! WI (EvalName); ! ARGS ((void))!
	!{!
	WriteLine (EvalCodes^.Codes.CloseLine);
	WriteText (f, EvalCodes^.Codes.Close);
	Node := Modules;
	WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.CloseLine);
	   WriteText (f, Node^.Module.EvalCodes^.Codes.Close);
	   Node := Node^.Module.Next;
	END;
	!}!
      IF IsElement (ORD ('+'), Options) THEN
	!!
	WI (EvalName); !::! WI (EvalName); ! (void)!
	!{!
	 IF IsElement (ORD ('K'), Options) THEN
	!# define yyInitStackSize 100!
	! yyStackSize = yyInitStackSize;!
	IF yyMax > 0 THEN
	   !# ifndef _MSC_VER!
	   FOR n := 0 TO yyMax DO
	   ! yyP [! WN (n); !] = yy! WN (n); !;!
	   END;
	   !# endif!
	END;
	!!
	 END;
	! Begin! WI (EvalName); ! ();!
	!}!
	!!
	WI (EvalName); !::~! WI (EvalName); ! (void)!
	!{!
	! Close! WI (EvalName); ! ();!
	!}!
      END;
}; .

PROCEDURE EvalImplC (t: Tree)

Ag (..) :- {
	EvalImplHead (t);
	!static char * yyCheck2 = & generate_! WI (iMain); !_module_without_option_0;!
	!!
	FOR n := 1 TO MaxVisit DO
	   !static void yyVisit! WN (n); ! ARGS ((register ! WI (itTree); ! yyt));!
	END;
	!!
	!void ! ClassPrefix2;
      IF IsElement (ORD ('+'), Options) THEN
	   !Evaluate!
      ELSE
	   WI (EvalName); !!
      END;
	!# ifdef HAVE_ARGS!
	! (! WI (itTree); ! yyt)!
	!# else!
	! (yyt) ! WI (itTree); ! yyt;!
	!# endif!
	!{!
      IF IsElement (ORD ('9'), Options) THEN
	! char yyHigh;!
	! yyMinLow = & yyHigh;!
      END;
      IF IsElement (ORD ('X'), Options) THEN
	! if (yyf == NULL) yyf = stdout;!
      END;
      IF MaxVisit > 0 THEN
	! yyVisit1 (yyt);!
      END;
      IF IsElement (ORD ('9'), Options) THEN
	@ printf ("Stacksize %ld\n", (long) (& yyHigh - yyMinLow));@
      END;
	!}!
	!!
	FOR n := 1 TO MaxVisit DO
	   !static void yyVisit! WN (n); !!
	   !# ifdef HAVE_ARGS!
	   ! (register ! WI (itTree); ! yyt)!
	   !# else!
	   ! (yyt) register ! WI (itTree); ! yyt;!
	   !# endif!
	   !{!
	   WriteLine (EvalCodes^.Codes.LocalLine);
	   WriteText (f, EvalCodes^.Codes.Local);
	   Node := Modules;
	   WHILE Node^.Kind = Tree.Module DO
	   WriteLine (Node^.Module.EvalCodes^.Codes.LocalLine);
	      WriteText (f, Node^.Module.EvalCodes^.Codes.Local);
	      Node := Node^.Module.Next;
	   END;
      IF IsElement (ORD ('9'), Options) THEN
	   ! char yyLow;!
	   ! if (& yyLow < yyMinLow) yyMinLow = & yyLow;!
      END;
	   !!
	   !yyRecursion:!
	   ! switch (yyt->Kind) {!
	   IF cOAG IN GrammarClass THEN		(* generate evaluator	*)
	      ForallClasses (Classes, GenEvaluator);
	   END;
	   ! default: ;!
      IF IsElement (ORD ('Z'), Options) THEN
	   !  yyVisitParent (yyt);!
      END;
	   ! }!
	   !}!
	   !!
	END;
	EvalImplTail (t);
}; .


PROCEDURE TypeName (t: Tree)

Class (..) :-
	CONDITION NoCodeClass * Properties = {{}};
	IF Trace IN Properties THEN
	   @"@ WI (Name); @",@
	ELSE
	   !0,!
	END
	.

PROCEDURE GenEvaluator (t: Tree)

Class (..) :-
	CONDITION NoCodeClass * Properties = {{}};
	CONDITION (Generated < InstCount) AND (Visits >= n);
	CONDITION NOT NoCode ({t}, Generated);
     HasTailRecursion: BOOLEAN; HasTailRecursion := FALSE;
	!!
	!case k! WP (Name); !:!
	Class := t;
{	LOOP
	   IF Generated = InstCount THEN EXIT; END;
	   INC (Generated);
	   WITH Instance^ [Instance^ [Generated].Order] DO
	      IF (Left IN Properties) AND (Attribute^.Child.Partition > n) THEN
	         DEC (Generated); EXIT;
	      END;
	      IF ({Inherited, Right, First} <= Properties) AND NOT (Virtual IN Properties) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END; !!
		 IF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    !write! WI (itTree);
		 ELSE
		    !write! WI (Attribute^.Child.Type);
		 END;
		 ! (yyt->! WP (Name); !.! WI (Selector^.Child.Name);
		 !->! WP (Selector^.Child.Type); !.! WI (Attribute^.Child.Name); !) xxWriteNl ();!
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Selector^.Child.Name); !:! WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Left, First} <= Properties) AND ({Dummy, Virtual} * Properties = {}) THEN
      IF IsElement (ORD ('X'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END; !!
		 IF Test IN Properties THEN
		    !writerbool (yyb) xxWriteNl ();!
		 ELSIF (Attribute^.Kind = Tree.Child) OR (Attribute^.Attribute.Type = itTree) THEN
		    !write! WI (itTree);
		    ! (yyt->! WP (Name); !.! WI (Attribute^.Child.Name); !) xxWriteNl ();!
		 ELSE
		    !write! WI (Attribute^.Child.Type);
		    ! (yyt->! WP (Name); !.! WI (Attribute^.Child.Name); !) xxWriteNl ();!
		 END;
      ELSIF IsElement (ORD ('Y'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteEval (yyt, "@ WI (Attribute^.Child.Name); @");@
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      ELSE
		 IF Action # tTree (ADR (Action)) THEN GenEvaluator (Action); END;
      END;
	      END;
	      IF ({Synthesized, Right, First} <= Properties) AND
		 (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits) THEN
      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
		 @yyWriteVisit (yyt, "@ WI (Selector^.Child.Name); ! ! 
		 WN (Attribute^.Child.Partition); @");@
      END;
		 IF (Attribute^.Child.Partition = n) AND NoCode (Class, Generated) THEN
		    !yyt = yyt->! WP (Name); !.! WI (Selector^.Child.Name); !; goto yyRecursion;!
		    HasTailRecursion := TRUE;
		 ELSE
		    !yyVisit! WN (Attribute^.Child.Partition);
		    ! (yyt->! WP (Name); !.! WI (Selector^.Child.Name); !);!
		 END;
	      END;
	   END;
	END;
	IF NOT HasTailRecursion THEN
      IF IsElement (ORD ('Z'), Options) AND (Trace IN t^.Class.Properties) THEN
	   !yyVisitParent (yyt);!
      END;
	   !break;!
	END;
}; .
Assign (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); !=! GenEvaluator (Arguments); !;!
}; .
Copy (..) :- {
	WriteLine (Pos);
	GenEvaluator (Results); !=! GenEvaluator (Arguments); !;!
}; .
TargetCode (..) :- {
	WriteLine (Pos);
	GenEvaluator (Code); !!
}; .
Check (..) :- {
	WriteLine (Pos);
	IF Condition # NoTree THEN
	   @if (! (@ 
      IF IsElement (ORD ('X'), Options) THEN
	   !yyb = ! 
      END;
	   GenEvaluator (Condition); !)) {! GenEvaluator (Statement); !; }!
	   IF Actions^.Kind = Tree.Check THEN
	      !else!
	      GenEvaluator (Actions);
	   END;
	ELSE
      IF IsElement (ORD ('X'), Options) THEN
	   !yyb = rfalse; ! 
      END;
	   GenEvaluator (Statement); !;!
	   GenEvaluator (Actions);
	END;
}; .
Designator (..) :- {
	Attr := IdentifyAttribute (Class, Selector);
	IF Attr # NoTree THEN
	   ChildsClass := Attr^.Child.Class;
	   Attr := IdentifyAttribute (ChildsClass, Attribute);
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      !yyt->! WP (Class^.Class.Name); !.! WI (Selector); !->! 
	      WP (ChildsClass^.Class.Name); !.! WI (Attribute);
	   END;
	ELSE
	   WI (Selector); !:! WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Ident (..) :- {
	Attr := IdentifyAttribute (Class, Attribute);
	IF Attr # NoTree THEN
	   IF NOT (Virtual IN Attr^.Attribute.Properties) THEN
	      !yyt->! WP (Class^.Class.Name); !.! WI (Attribute);
	   END;
	ELSE
	   WI (Attribute);
	END;
	GenEvaluator (Next);
}; .
Remote (..) :-
   TheClass: Class; k: INTEGER;
   TheClass := IdentifyClass (TreeRoot^.Ag.Classes, Type);
{  IF TheClass # NoTree THEN
      Attr := IdentifyAttribute (TheClass, Attribute);
      IF Attr # NoTree THEN
	 WITH Attr^.Attribute DO
	    k := ToBit0 (TheClass, AttrIndex);
	    IF Synthesized IN Properties THEN
	       !REMOTE_SYN (yyIsComp! WN (k DIV BSS); !, ! WN (k MOD BSS); !, yyS! WN (k); !, ! 
	       GenEvaluator (Designators); !, ! WP (t^.Remote.Type); !, ! WI (Attribute); !)! 
	    ELSIF Inherited IN Properties THEN
	       !REMOTE_INH (yyIsComp! WN (k DIV BSS); !, ! WN (k MOD BSS); !, ! WN (k); !, ! 
	       GenEvaluator (Designators); !, ! WP (t^.Remote.Type); !, ! WI (Attribute); !)! 
	    ELSE
	       GenEvaluator (Designators); !->! WP (t^.Remote.Type); !.! WI (Attribute);
	    END;
	 END;
      END;
   END;
   GenEvaluator (Next);
}; .
Any (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .
Anys (..) :- {
	GenEvaluator (Layouts);
	GenEvaluator (Next);
}; .
LayoutAny (..) :- {
	WriteString (f, Code);
	GenEvaluator (Next);
}; .

PREDICATE NoCode (Class, Start: SHORTCARD)

Class (..), ... :- {
	LOOP
	   IF Start = InstCount THEN EXIT; END;
	   INC (Start);
	   WITH Instance^ [Instance^ [Start].Order] DO
	      IF (Left IN Properties) AND (Attribute^.Child.Partition > n) THEN
	         EXIT;
	      END;
	      IF ({Inherited, Right, First} <= Properties) AND NOT (Virtual IN Properties) THEN
		 IF Action # tTree (ADR (Action)) THEN RETURN FALSE; END;
	      END;
	      IF ({Synthesized, Left, First} <= Properties) AND ({Dummy, Virtual} * Properties = {}) THEN
		 IF Action # tTree (ADR (Action)) THEN RETURN FALSE; END;
	      END;
	      IF ({Synthesized, Right, First} <= Properties) AND
		 (Attribute^.Child.Partition <= Selector^.Child.Class^.Class.Visits) THEN
		 RETURN FALSE;
	      END;
	   END;
	END;
}; .
