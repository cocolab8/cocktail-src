(* $Id: Position.mi,v 1.1 2008/09/13 15:36:01 grosch Exp $ *)

(*
 * $Log: Position.mi,v $
 * Revision 1.1  2008/09/13 15:36:01  grosch
 * fixed notation for comment leader
 *
 * Revision 1.0  1998/05/29 10:46:12  grosch
 * Initial revision
 *
 * Revision 1.0  1998/05/29 10:44:39  grosch
 * Initial revision
 *
 *)

(* Ich, Doktor Josef Grosch, Informatiker, Juli 1992 *)

IMPLEMENTATION MODULE Position;

FROM IO		IMPORT tFile, WriteS, WriteI, WriteC, ReadI, ReadC;
FROM Idents	IMPORT tIdent, NoIdent, WriteIdent;

PROCEDURE Compare (Position1, Position2: tPosition): INTEGER;
   BEGIN
      WITH Position1 DO
	 IF File   < Position2.File   THEN RETURN -1; END;
	 IF File   > Position2.File   THEN RETURN  1; END;
	 IF Line   < Position2.Line   THEN RETURN -1; END;
	 IF Line   > Position2.Line   THEN RETURN  1; END;
	 IF Column < Position2.Column THEN RETURN -1; END;
	 IF Column > Position2.Column THEN RETURN  1; END;
	 RETURN 0;
      END;
   END Compare;

PROCEDURE WritePosition (File: tFile; Position: tPosition);
   BEGIN
      WriteC (File, '"');
      WriteIdent (File, Position.File);
      WriteS (File, '", ');
      WriteI (File, Position.Line  , 3);
      WriteS (File, ", ");
      WriteI (File, Position.Column, 2);
   END WritePosition;

PROCEDURE ReadPosition	(File: tFile; VAR Position: tPosition);
   VAR c: CHAR;
   BEGIN
      Position.Line := ReadI (File);
      c := ReadC (File);
      Position.Column := ReadI (File);
   END ReadPosition;

BEGIN
   NoPosition.File	:= NoIdent;
   NoPosition.Line	:= 0;
   NoPosition.Column	:= 0;
END Position.
