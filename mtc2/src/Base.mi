(*
 *	M T C  -  Modula-2 to C Translator
 *      ----------------------------------
 *
 *	Purpose: base operations for file and argument handling
 *
 *	$Author: grosch $
 *	$Date: 1998/05/29 10:46:12 $
 *	$Revision: 1.0 $
 *
 ***)

IMPLEMENTATION MODULE Base;

FROM rSystem	IMPORT
  GetArgCount	, GetArgument	, rExit		;

FROM IO		IMPORT
  tFile		, StdError	, ReadOpen	, ReadClose	,
  WriteOpen	, WriteS	, WriteC	, WriteNl	,
  CloseIO	;

FROM DynArray	IMPORT
  MakeArray	, ExtendArray	;

FROM Idents	IMPORT
  tIdent	, GetString	;

FROM Strings	IMPORT
  tString	, ArrayToString	, StringToArray	, Assign	,
  AssignEmpty	, Concatenate	, Append	;

FROM Sets	IMPORT
  tSet		, MakeSet	, Include	, IsElement	;

CONST
  Infinite	= 65535;
  InitialSize	= 4;		(* initial size of library table	*)

VAR
  TablePtr	,
  TableSize	: LONGINT;
  LibraryTable	: POINTER TO ARRAY [0 .. Infinite] OF tString;
  (* table of defined libraries						*)

  Options	: tSet;		(* set of mtc options	*)

(*------- CheckArguments -----------------------------------------------------*)

PROCEDURE CheckArguments;
(* Handling of mtc arguments:					*)
(*   Checks arguments, sets 'SourceFile' and 'MtcLib', and	*)
(*   defines mtc options and libraries for definition modules.	*)
VAR
  i, j		: CARDINAL;
  Argument	: ARRAY [0 .. 127] OF CHAR;
  ch		: CHAR;
  f		: tFile;
BEGIN
  FOR i := 1 TO GetArgCount () - 1 DO
    GetArgument (i, Argument);
    IF Argument [0] = '-' THEN 
      IF Argument [1] = 'd' THEN	(* library for def. modules	*)
	j := 2;
	LOOP
	  ch := Argument [j];
	  Argument [j-2] := ch;
	  IF ch = 0C THEN EXIT; END;
	  INC (j);
	END; (* LOOP *)
	DefineLibrary (Argument);
      ELSIF Argument [1] = 'o' THEN	(* mtc library			*)
	j := 2;
	LOOP
	  ch := Argument [j];
	  IF ch = 0C THEN EXIT; END;
	  Append (MtcDestination, ch);
	  INC (j);
	END; (* LOOP *)
	Append (MtcDestination, '/');
      ELSE				(* mtc option(s)		*)
	j := 0;
	LOOP
	  INC (j);
	  ch := Argument [j];
	  CASE ch OF
	  | 0C :
	    EXIT;
	  | 'c', 'f', 'D', 'P', 'h', 'i', 'm', 'r', 't', 'w', 'u':
	    Include (Options, ORD (ch));
	  ELSE
	    WriteS (StdError, "mtc: illegal option '");
	    WriteC (StdError, ch);
	    WriteS (StdError, "'");
	    WriteNl (StdError);
	    CloseIO;
	    rExit (1);
	  END; (* CASE *)
	END; (* LOOP *)
      END; (* IF *)
    ELSE				(* source file name		*)
      j := 0;
      REPEAT
	ch := Argument [j];
	SourceFile [j] := ch;
	INC (j);
      UNTIL ch = 0C;
      f := ReadOpen (SourceFile);
      CheckOpen (f, SourceFile);
      ReadClose (f);
    END; (* IF *)
  END; (* FOR *)
END CheckArguments;

(*------- OptionIsSet --------------------------------------------------------*)

PROCEDURE OptionIsSet	(Option: CHAR): BOOLEAN;
(* Returns TRUE if mtc option 'Option' is set.			*)
BEGIN
  RETURN IsElement (ORD (Option), Options);
END OptionIsSet;

(*------- DefineLibrary ------------------------------------------------------*)

PROCEDURE DefineLibrary	(Directory: ARRAY OF CHAR);
(* Define directory 'Directory' as a library for definition	*)
(* modules.							*)
BEGIN
  IF TablePtr >= TableSize THEN
    ExtendArray (LibraryTable, TableSize, SIZE (tString));
  END; (* IF *)
  ArrayToString (Directory, LibraryTable^ [TablePtr]);
  Append (LibraryTable^ [TablePtr], '/');
  INC (TablePtr);
END DefineLibrary;

(*------- CheckDefFile -------------------------------------------------------*)

PROCEDURE CheckDefFile	(    ModuleName	: tIdent;
			 VAR FileName	: ARRAY OF CHAR;
			 VAR Success	: BOOLEAN);
(* Check if a file named 'ModuleName'.md exists in the current	*)
(* directory, or in one of the defined libraries and return the	*)
(* full name of that file in 'FileName' if such a file exists.	*)
VAR
  Extension	: tString;
  
  PROCEDURE CheckFile	(FileName: ARRAY OF CHAR; VAR Success: BOOLEAN);
  (* Check if a file named 'FileName' exists.			*)
  VAR
    File	: tFile;
  BEGIN
    File := ReadOpen (FileName);
    IF File < 0 THEN
      Success := FALSE;
    ELSE
      Success := TRUE;
      ReadClose (File);
    END;
  END CheckFile;

  PROCEDURE TryFile (VAR Extension: tString; VAR FileName: ARRAY OF CHAR; VAR Success: BOOLEAN);
  VAR
    BaseName	,
    PathName	: tString;
    TableIndex	: LONGINT;
  BEGIN
     (* get name of definition module 'ModuleName' *)
     GetString (ModuleName, BaseName);

     (* append extension and null character	*)
     Concatenate (BaseName, Extension);
     Append (BaseName, 0C);

     (* search in current directory		*)
     StringToArray (BaseName, FileName);
     CheckFile (FileName, Success);

     IF Success THEN RETURN; END;

     (* search in libraries			*)
     TableIndex := 0;
     WHILE NOT Success AND (TableIndex < TablePtr) DO
       Assign (PathName, LibraryTable^ [TableIndex]);
       Concatenate (PathName, BaseName);
       StringToArray (PathName, FileName);
       CheckFile (FileName, Success);
       INC (TableIndex);
     END; (* WHILE *)
  END TryFile;

BEGIN
  ArrayToString (".md", Extension);
  TryFile (Extension, FileName, Success); IF Success THEN RETURN; END;
  ArrayToString (".MD", Extension);
  TryFile (Extension, FileName, Success); IF Success THEN RETURN; END;
  ArrayToString (".def", Extension);
  TryFile (Extension, FileName, Success); IF Success THEN RETURN; END;
  ArrayToString (".DEF", Extension);
  TryFile (Extension, FileName, Success); IF Success THEN RETURN; END;
END CheckDefFile;

(*------- OpenHeader ---------------------------------------------------------*)

PROCEDURE OpenHeader	(Ident: tIdent): tFile;
(* Open a header file named 'Ident'.h for output.	*)
VAR
  FileName	: ARRAY [0 .. 127] OF CHAR;
  File		: tFile;
  String, tmp	: tString;
BEGIN
  GetString (Ident, tmp);
  Assign(String, MtcDestination);
  Concatenate(String, tmp); 
  Append (String, '.');
  Append (String, 'h');
  Append (String, 0C);

  StringToArray (String, FileName);

  File := WriteOpen (FileName);

  CheckOpen (File, FileName);

  RETURN File;
END OpenHeader;

(*------- OpenProgram --------------------------------------------------------*)

PROCEDURE OpenProgram	(Ident: tIdent): tFile;
(* Open a source file named 'Ident'.c for output.	*)
VAR
  FileName	: ARRAY [0 .. 127] OF CHAR;
  File		: tFile;
  String, tmp	: tString;
BEGIN
  GetString (Ident, tmp);
  Assign(String, MtcDestination);
  Concatenate(String, tmp);
    
  Append (String, '.');
  Append (String, 'c');
  Append (String, 0C);

  StringToArray (String, FileName);

  File := WriteOpen (FileName);

  CheckOpen (File, FileName);

  RETURN File;
END OpenProgram;

(*------- CheckOpen ----------------------------------------------------------*)

PROCEDURE CheckOpen	(File: tFile; FileName: ARRAY OF CHAR);
(* Check if file 'File' has been opened sucessfully. Otherwise	*)
(* report an error and terminate program with exit status 1.	*)
BEGIN
  IF File < 0 THEN
    WriteS (StdError, "mtc: cannot open file ");
    WriteS (StdError, FileName);
    WriteNl (StdError);
    CloseIO;
    rExit (1);
  END; (* IF *)
END CheckOpen;

BEGIN
  MakeSet (Options, ORD (MAX (CHAR)));
  TablePtr  := 0;
  TableSize := InitialSize;
  MakeArray (LibraryTable, TableSize, SIZE (tString));
END Base.
