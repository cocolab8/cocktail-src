BIN	= $(HOME)/bin
LIB	= $(HOME)/lib
M2FLAGS	= -cuw
MC	= mc -d ../../reuse/src
INSTALL		= /usr/bin/install -c
INSTALL_PROGRAM	= $(INSTALL)
INSTALL_DATA	= $(INSTALL) -m 644

# Modula-2 source modules
SRCM	= AssocTab.md AssocTab.mi Base.md Base.mi DefMods.md DefMods.mi \
	  Errors.md Errors.mi Source.md Source.mi Tokens.md Tokens.mi \
	  UniqueId.md UniqueId.mi GenIdent.md GenIdent.mi \
	  Position.md Position.mi Values.md Values.mi Types.md Types.mi mtc2.mi

# source modules generated by tools
GEN	= Parser.md Parser.mi Scanner.md Scanner.mi Tree.md Tree.mi \
	  Defs.md Defs.mi Semantic.md Semantic.mi Code.md Code.mi

# "runtime system"
RTS	= SYSTEM_.h SYSTEM_.c Argument.h Argument.c

all:	mtc2

sources:	$(GEN) Tree.TS

mtc2:	$(GEN) mtc2_boot
	# avoid implicit rule

mtc2_boot:	$(SRCM)
	echo p mtc2 | $(MC)

Scanner.md Scanner.mi:	modula.rex
	rex -di modula.rex

Parser.md Parser.mi:	modula.ell
	ell -di modula.ell

Tree.md Tree.mi:	modula.cg
	cg -mRdiDI0 modula.cg

Semantic.md Semantic.mi:	modula.cg
	cg -DI0 modula.cg

Defs.md Defs.mi:	defs.cg
	cg -mdio defs.cg

Tree.TS:	modula.cg
	echo SELECT Abstract | cat - modula.cg | cg -4

Code.md Code.mi:	code.puma Tree.TS opp opp.sed
	opp code.puma | puma -dis
#	Opp = output pre processor

install:	mtc2 $(BIN) $(LIB)/mtc2
	sh -c "if test $(LIB) = $(BIN); then echo error: BIN = LIB; false; else true; fi"
	$(INSTALL_PROGRAM) mtc2 $(BIN)/mtc2
	cp $(RTS) $(LIB)/mtc2
	cd $(LIB)/mtc2; chmod a+r $(RTS)

# installation directories

$(BIN):
	mkdir -p $(BIN)

$(LIB)/mtc2:
	mkdir -p $(LIB)/mtc2

m2c:
	make $(GEN)
	make sources M2FLAGS="$(M2FLAGS) -d../../reuse/src -o../m2c" -f ../m2c/Makefile

MTC	= time mtc2 -tm -d../../reuse/src s.mi

test:	$(GEN) $(SRCM)
	cg -IL modula.cg
	mv Semantic.mi s.mi
	cg -dimRDI0 modula.cg
	make mtc2
	tcsh -c "$(MTC); $(MTC); $(MTC); $(MTC)"
	wc Semantic.mi
	size Semantic.o mtc2
	cg -dimRDI09 modula.cg
	make mtc2
	$(MTC)
	cg -dimRDI modula.cg
	make mtc2
	tcsh -c "$(MTC); $(MTC); $(MTC); $(MTC)"
	wc Semantic.mi
	size Semantic.o mtc2
	cg -dimRDI9 modula.cg
	make mtc2
	$(MTC)
	cg -dimRDIL modula.cg
	make mtc2
	tcsh -c "$(MTC); $(MTC); $(MTC); $(MTC)"
	wc Semantic.mi
	size Semantic.o mtc2
	cg -dimRDIL9 modula.cg
	make mtc2
	$(MTC)

clean:
	rm -f *.[dimor] core ERRORS LISTING

CLEAN:	clean
	rm -f mtc2 $(GEN) Tree.TS
