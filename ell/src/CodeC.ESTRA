(*
 *	ell2 - a redesign of ell
 *
 *	$RCSfile: CodeC.ESTRA,v $
 *
 *	purpose:	generation of C code
 *
 *	$Author: grosch $
 *	$Date: 2016/04/22 07:21:56 $
 *)

.. ^ Spaces;
.. $ WriteNl (file);
.. + INC (SpaCo%);
.. - DEC (SpaCo%);
.. % WriteS (file, '%');
.. n WriteI (file, %, 0);
.. i WriteIdent (file, %);
.. e WriteIdentEscaped (file, %);
.. s WriteS (file, %);
.. c WriteI (file, Code (%), 0);
.. I WriteIndex (file, %);
.. R WriteRecIndex (file, %);
.. t WriteTerminal (file, %);

TRANSFORMATION	CodeC

EXPORT	{
PROCEDURE ParC;
}

GLOBAL	{
FROM ArgCheck	IMPORT	DEF, IMP, LINE, SourceFileName,
			TokenConstants, TokenPrefix;
FROM Codes	IMPORT	cNoIndex, vMaxRecSetIndex, vMaxSetIndex, Code, MaxCode,
			WriteIndex, WriteRecIndex, Term, GetSet, GetRecSet,
			WriteTerminal, tCode;
FROM DynArray	IMPORT	MakeArray, ReleaseArray;
FROM Errors	IMPORT	Message, MessageI, Error, Fatal, Array;
FROM Position	IMPORT	NoPosition;
FROM IO		IMPORT	tFile, WriteS, WriteC, WriteI, WriteNl,
			WriteOpen, WriteClose;
FROM Idents	IMPORT	tIdent, WriteIdent, GetString, MakeIdent;
FROM Sets	IMPORT	tSet, MakeSet, ReleaseSet, Extract, IsEmpty, Assign,
			Union, Include, Exclude, IsElement, Minimum, Maximum,
			ResizeSet, Size;
FROM StringM	IMPORT	WriteString;
FROM SYSTEM	IMPORT	TSIZE, ADR;
FROM Scanner	IMPORT	NoIdent, Epsilon;
FROM Types	IMPORT	IsTerm, IsNonterm, Terminals;
FROM Strings	IMPORT	tString, Char, Length, ArrayToString, Concatenate,
			Append, StringToArray;
FROM Tree	IMPORT	ScannerName, ParserName;
FROM Table	IMPORT	MaxId;

IMPORT Idents, Codes;

CONST
  cBitsPerChar		= 8;
  cBitsPerLong		= 32;
  cDefinition		= '.h';
  cImplementation	= '.c';
  cDrvImp		= 'Drv.c';

VAR
  file		: tFile;
  SpaCo, Label	: INTEGER;
  vExport	: BOOLEAN;
  InDefault	: BOOLEAN;
  lSections	: Tree.tTree;
  PathS, String	: tString;
  PathA		: ARRAY [0..256] OF CHAR;

PROCEDURE Prefix;
  BEGIN
    IF ScannerName # Idents.NoIdent THEN
      WriteIdent (file, ScannerName); WriteS (file, '_');
    END;
  END Prefix;

PROCEDURE Spaces;
  VAR i: INTEGER;
  BEGIN FOR i := 1 TO SpaCo DO WriteS (file, '  '); END; END Spaces;

PROCEDURE CodeIsElement (index: INTEGER; set: tSet);
  VAR
    todo: tSet;
    id: tIdent;
    sl: INTEGER;
  BEGIN
    IF index = cNoIndex THEN
      MakeSet (todo, Size (set));
      Assign (todo, set);
      Exclude (todo, Epsilon);
      IF NOT IsEmpty (todo) THEN
	LOOP
	  id := Extract (todo);
	  WriteS (file, '(xxToken == ');
	  WriteI (file, Code (id), 0);
	  WriteS (file, ' /* ');
	  WriteTerminal (file, id);
	  WriteS (file, ' */)');
	  IF IsEmpty (todo) THEN EXIT END;
	  WriteS (file, ' || ');
	END;
      END;
      ReleaseSet (todo);
    ELSE
      sl := index DIV cBitsPerChar;
      WriteS (file, '(xxVerticalSet [xxToken');
      IF sl # 0 THEN
	WriteS (file, ' + ');
	WriteI (file, sl * (MaxCode () + 1), 0);
      END;
      WriteS (file, '] & 1 << ');
      WriteI (file, index MOD cBitsPerChar, 0);
      IF FALSE THEN
	WriteS (file, ' /* ');
	WriteIndex (file, index);
	WriteS (file, ' */');
      END;
      WriteS (file, ')');
    END;
  END CodeIsElement;

PROCEDURE CodeRecovery (recover, expect: INTEGER);
  BEGIN
    IF expect = cNoIndex THEN
.     xxUnexpected ({n recover}, xxGlobalRecoverySet);\
      IF FALSE THEN
.	/* {R recover} */
      ELSE
.$
      END;
    ELSE
.     xxExpected ({n expect}, {n recover}, xxGlobalRecoverySet);\
      IF FALSE THEN
.	/* {R expect} / {R recover} */
      ELSE
.$
      END;
    END;
  END CodeRecovery;

PROCEDURE WriteLabels (set: tSet);
  VAR
    todo: tSet;
    id: tIdent;
  BEGIN
    MakeSet (todo, Size (set));
    Assign (todo, set);
    WHILE NOT IsEmpty (todo) DO
      id := Extract (todo);
.     case \
      WriteI (file, Code (id), 0);
      WriteS (file, ' /* ');
      WriteTerminal (file, id);
      WriteS (file, ' */ :;');
      WriteNl (file);
    END;
    ReleaseSet (todo);
  END WriteLabels;

VAR
  NumberArray		: POINTER TO ARRAY [0..1000] OF INTEGER;
  NumberArraySize	: LONGINT;
  MaxNumberArray	: POINTER TO ARRAY [0..1000] OF INTEGER;
  MaxNumberArraySize	: LONGINT;

PROCEDURE ClearArray (VAR a: ARRAY OF INTEGER);
  VAR id: tIdent;
  BEGIN
    FOR id := 0 TO MaxId DO a [id] := 0; END;
  END ClearArray;

PROCEDURE WriteAttributes;
  VAR
    id: tIdent;
    i, max: INTEGER;
  BEGIN
    FOR id := 0 TO MaxId DO
      max := MaxNumberArray^ [id];
      IF max > 0 THEN
	IF IsTerm (id) THEN
.^
	  Prefix;
.	  tScanAttribute \
	ELSE
.	\  {i ParserName}_tParsAttribute \
	END;
	FOR i := 1 TO max - 1 DO
.	  {i id}{n i}, \
	END;
.	{i id}{n max};
      END;
    END;
  END WriteAttributes;

VAR Hex: ARRAY [0..15] OF CHAR;

PROCEDURE WriteRecSets;
  VAR
    value: INTEGER;
    set: tSet;
    no, bit, bitvalue: INTEGER;
    index: INTEGER;
    code, maxCode: tCode;
  BEGIN
    maxCode := MaxCode ();
    MakeSet (set, maxCode);
    FOR index := 0 TO vMaxRecSetIndex DO
      GetRecSet (index, set);
      WriteS (file, '  {');
      FOR no := 0 TO maxCode DIV cBitsPerLong DO
	WriteS (file, ' 0x');
        FOR bit := 0 TO cBitsPerLong - 1 DO
	  IF bit MOD 4 = 0 THEN
	    value := 0;
	    bitvalue := 8;
	  END;
	  code := no * cBitsPerLong + bit;
	  IF (code <= maxCode) AND IsElement (code, set) THEN
	    INC (value, bitvalue);
	  END;
	  bitvalue := bitvalue DIV 2;
	  IF bit MOD 4 = 3 THEN
	    WriteC (file, Hex [value]);
	  END;
	END;
	WriteS (file, 'L,');
	IF no MOD 4 = 3 THEN WriteNl (file); WriteS (file, '   '); END;
      END;
      WriteS (file, ' },');
      WriteNl (file);
    END;
    ReleaseSet (set);
  END WriteRecSets;

PROCEDURE WriteVerticalSet (no: INTEGER);
  VAR
    sets: ARRAY [0..cBitsPerChar-1] OF tSet;
    code, bit: INTEGER;
    index: INTEGER;
    value, bitvalue: INTEGER;
  BEGIN
    FOR bit := 0 TO cBitsPerChar - 1 DO
      MakeSet (sets [bit], MaxCode ());
      index := no * cBitsPerChar + bit;
      GetSet (index, sets [bit]);
    END;
    FOR code := 0 TO MaxCode () DO
      IF code MOD 8 = 0 THEN WriteNl (file); END;
      WriteS (file, ' 0x');
      FOR bit := cBitsPerChar - 1 TO 0 BY -1 DO
	IF bit MOD 4 = 3 THEN
	  value := 0;
	  bitvalue := 8;
	END;
	IF IsElement (code, sets [bit]) THEN
	  INC (value, bitvalue);
	END;
	IF bit MOD 4 = 0 THEN
	  WriteC (file, Hex [value]);
	END;
	bitvalue := bitvalue DIV 2;
      END;
      WriteS (file, ',');
    END;
    WriteNl (file);
    FOR bit := 0 TO cBitsPerChar - 1 DO
      ReleaseSet (sets [bit]);
    END;
  END WriteVerticalSet;

PROCEDURE ParC;
  VAR file: tFile;
  BEGIN
    GetString		(ParserName, PathS);
    ArrayToString	(cDrvImp, String);
    Concatenate		(PathS, String);
    Append		(PathS, 0C);
    StringToArray	(PathS, PathA);
    file := WriteOpen	(PathA);
    IF file < 0 THEN
      MessageI ("cannot open file", Fatal, NoPosition, Array, ADR (PathA));
    END;

.	# include "{i ParserName}.h"
.
.	int main ARGS ((void))
.	\{
.      \   {i ParserName} ();
.      \   Close{i ParserName}  ();
.      \   return 0;
.	\}

    WriteClose (file);
  END ParC;

PROCEDURE GenTokenConstants;
  CONST
    Initial	= 0;
    Character	= 1;
    Special	= 2;
  VAR
    UsedNames, IdentSet		: tSet;
    MaxName, First, Last, i	: CARDINAL;
    From, To, Str		: tString;
    Ident	: tIdent;
    Array	: ARRAY [0 .. 255] OF CHAR;
    ch		: CHAR;
    Text	: ARRAY [0 .. 31] OF CHAR;
    State	: SHORTCARD;
    code	: INTEGER;
    term	: tIdent;
  BEGIN
    MaxName := MaxId + CARDINAL (MaxCode ());
    MakeSet (UsedNames, MaxName);
    MakeSet (IdentSet, 127);
    FOR ch := 'A' TO 'Z' DO Include (IdentSet, ORD (ch)); END;
    FOR ch := 'a' TO 'z' DO Include (IdentSet, ORD (ch)); END;
    FOR ch := '0' TO '9' DO Include (IdentSet, ORD (ch)); END;
    Include (IdentSet, ORD ('_'));

    FOR code := 0 TO MaxCode () DO
      term := Term (code);
      IF term # NoIdent THEN
	GetString (term, From);
	First := 1;
	Last := Length (From);
	ch := Char (From, 1);
	IF (ch = "'") OR (ch = '"') THEN
	  First := 2;
	  DEC (Last);
	END;
	State := Initial;
	ArrayToString (TokenPrefix, To);
	FOR i := First TO Last DO
	  ch := Char (From, i);
	  IF ORD (ch) >= 128 THEN		(* 8 bit character *)
	    IF State # Initial THEN Append (To, '_'); END;
	    Append (To, Hex [ORD (ch) DIV 16]);
	    Append (To, Hex [ORD (ch) MOD 16]);
	    State := Special;
						(* 7 bit character *)
	  ELSIF IsElement (ORD (ch), IdentSet) THEN
	    IF State = Special THEN Append (To, '_'); END;
	    Append (To, ch);
	    State := Character;
	  ELSIF ch = '-' THEN
	    IF State = Character THEN
	      Append (To, '_');
	    ELSE
	      IF State # Initial THEN Append (To, '_'); END;
	      ArrayToString ("minus", Str);
	      Concatenate (To, Str);
	      State := Special;
	    END;
	  ELSE
	    CASE ch OF
	    | CHR (0)	: Text := "NUL";
	    | CHR (1)	: Text := "SOH";
	    | CHR (2)	: Text := "STX";
	    | CHR (3)	: Text := "ETX";
	    | CHR (4)	: Text := "EOT";
	    | CHR (5)	: Text := "ENQ";
	    | CHR (6)	: Text := "ACK";
	    | CHR (7)	: Text := "BEL";
	    | CHR (8)	: Text := "BS";
	    | CHR (9)	: Text := "HT";
	    | CHR (10)	: Text := "LF";
	    | CHR (11)	: Text := "VT";
	    | CHR (12)	: Text := "FF";
	    | CHR (13)	: Text := "CR";
	    | CHR (14)	: Text := "SO";
	    | CHR (15)	: Text := "SI";
	    | CHR (16)	: Text := "DLE";
	    | CHR (17)	: Text := "DC1";
	    | CHR (18)	: Text := "DC2";
	    | CHR (19)	: Text := "DC3";
	    | CHR (20)	: Text := "DC4";
	    | CHR (21)	: Text := "NAK";
	    | CHR (22)	: Text := "SYN";
	    | CHR (23)	: Text := "ETB";
	    | CHR (24)	: Text := "CAN";
	    | CHR (25)	: Text := "EM";
	    | CHR (26)	: Text := "SUB";
	    | CHR (27)	: Text := "ESC";
	    | CHR (28)	: Text := "FS";
	    | CHR (29)	: Text := "GS";
	    | CHR (30)	: Text := "RS";
	    | CHR (31)	: Text := "US";
	    | ' '	: Text := "space";
	    | '!'	: Text := "exclamation_mark";
	    | '"'	: Text := "double_quote";
	    | '#'	: Text := "hash_sign";
	    | '$'	: Text := "dollar";
	    | '%'	: Text := "percent";
	    | '&'	: Text := "ampersand";
	    | "'"	: Text := "quote";
	    | '('	: Text := "left_parentheses";
	    | ')'	: Text := "right_parentheses";
	    | '*'	: Text := "asterisk";
	    | '+'	: Text := "plus";
	    | ','	: Text := "comma";
	 (* | '-'	: Text := "minus"; *)
	    | '.'	: Text := "dot";
	    | '/'	: Text := "slash";
	    | ':'	: Text := "colon";
	    | ';'	: Text := "semicolon";
	    | '<'	: Text := "less";
	    | '='	: Text := "equal";
	    | '>'	: Text := "greater";
	    | '?'	: Text := "question_mark";
	    | '@'	: Text := "at_sign";
	    | '['	: Text := "left_bracket";
	    | '\'	: Text := "backslash";
	    | ']'	: Text := "right_bracket";
	    | '^'	: Text := "uparrow";
	 (* | '_'	: Text := "underscore"; *)
	    | '`'	: Text := "backquote";
	    | '{'	: Text := "left_curly";
	    | '|'	: Text := "bar";
	    | '}'	: Text := "right_curly";
	    | '~'	: Text := "tilde";
	    | CHR (127) : Text := "DEL";
	    END;
	    IF State # Initial THEN Append (To, '_'); END;
	    ArrayToString (Text, Str);
	    Concatenate (To, Str);
	    State := Special;
	  END;
	END;
	LOOP
	  Ident := MakeIdent (To);
	  IF Ident > MaxName THEN
	    INC (MaxName, MaxCode ());
	    ResizeSet (UsedNames, MaxName);
	  END;
	  IF NOT IsElement (Ident, UsedNames) THEN EXIT; END;
	  Append (To, '_');
	END;
	Include (UsedNames, Ident);
	StringToArray (To, Array);
.	# define {s Array}	{n code}	/* {i term} */
      END;
    END;
.
    ReleaseSet (UsedNames);
    ReleaseSet (IdentSet);
  END GenTokenConstants;

PROCEDURE WriteIdentEscaped (file: tFile; Ident: tIdent);
  VAR
    i	: CARDINAL;
    ch	: CHAR;
    s	: tString;
  BEGIN
    GetString (Ident, s);
    FOR i := 1 TO Length (s) DO
      ch := Char (s, i);
      IF ch = '\' THEN WriteC (file, ch); END;
      WriteC (file, ch);
    END;
  END WriteIdentEscaped;
}

BEGIN	{
  vExport := FALSE;
  SpaCo := 0;
  Label := 0;
  Hex [0] := '0';
  Hex [1] := '1';
  Hex [2] := '2';
  Hex [3] := '3';
  Hex [4] := '4';
  Hex [5] := '5';
  Hex [6] := '6';
  Hex [7] := '7';
  Hex [8] := '8';
  Hex [9] := '9';
  Hex [10] := 'A';
  Hex [11] := 'B';
  Hex [12] := 'C';
  Hex [13] := 'D';
  Hex [14] := 'E';
  Hex [15] := 'F';
}

GRAMMAR Tree

grammar		=
| Grammar	(sections, tokens, rules)

sections	=
| Sections0	()
| Sections	(section, sections)

section		=
| Export	(codes)
| Global	(codes)
| Local		(codes)
| Begin		(codes)
| Close		(codes)

codes		=
| Codes0	()
| Codes		(code, codes)

code		=
| Code		()

tokens		=
| Tokens0	()
| Tokens	(token, tokens)

token		=
| Token		(id)

id		=
| Id		()

rules		=
| Rules0	()
| Rules		(rule, rules)

rule		=
| Rule		(id, codes, expr)

expr		=
| Option	(expr)
| Times		(expr)
| Plus		(expr)
| List		(body: expr, sep: expr)
| Action	(codes)
| Leaf		(id)

expr		->
alternative	=
| Alternative0	()
| Alternative	(expr, alternative)

expr		->
sequence	=
| Sequence0	()
| Sequence	(expr, sequence)


FUNCTION	CODE			/ grammar /

  grammar
		{
		IF DEF THEN CodeDef (grammar); END;
		IF IMP THEN CodeImp (grammar); END;
		}


/*
 *	generate definition of parser
 */

FUNCTION	CodeDef			/ grammar /

  Grammar	(sections, tokens, rules)
		{
		GetString	(ParserName, PathS);
		ArrayToString	(cDefinition, String);
		Concatenate	(PathS, String);
		Append		(PathS, 0C);
		StringToArray	(PathS, PathA);
		file := WriteOpen (PathA);
		IF file < 0 THEN
		  MessageI ("cannot open file", Fatal, NoPosition,
		    Array, ADR (PathA));
		END;

		IF ScannerName # Idents.NoIdent THEN
.		   # include "{i ScannerName}.h"
		ELSE
.		   # include "Scanner.h"
		END;
.
.		# ifdef HAVE_ARGS
.		# define ARGS(parameters)	parameters
.		# else
.		# define ARGS(parameters)	()
.		# endif
.
		IF TokenConstants THEN
		  GenTokenConstants;
		END;
		CodeExport (sections);
		IF NOT vExport THEN	(* Default EXPORT action *)
.		typedef	\
		Prefix;
.		   tScanAttribute {i ParserName}_tParsAttribute;
		END;
.
.		extern	{i ParserName}_tParsAttribute {i ParserName}_ParsAttribute;
.		extern	char *	{i ParserName}_TokenName [];
.
.		extern	int	{i ParserName}		ARGS ((void));
.		extern	void	Close{i ParserName}	ARGS ((void));
		WriteClose (file);
		}


/*
 *	generate implementation of parser
 */

FUNCTION	CodeImp			/ grammar /

  Grammar	(sections, tokens, Rules (Rule (Id (), codes, expr), rules))
		DECLARE	{ VAR
		  i	: INTEGER;
		  j	: CARDINAL;
		  set	: tSet;
		  id	: tIdent;
		  s	: tString;
		  c	: CHAR;
		}
		{
		GetString	(ParserName, PathS);
		ArrayToString	(cImplementation, String);
		Concatenate	(PathS, String);
		Append		(PathS, 0C);
		StringToArray	(PathS, PathA);
		file := WriteOpen (PathA);
		IF file < 0 THEN
		  MessageI ("cannot open file", Fatal, NoPosition,
		    Array, ADR (PathA));
		END;

.		# include	"{i ParserName}.h"
.		# include	"rString.h"
.		# include	"Errors.h"
.
.		# define	xxbool	char
.		# define	xxtrue	1
.		# define	xxfalse	0
.		# define	xxEof	0
.
		CodeGlobal (sections);
		lSections := sections;

.		typedef struct xxsUnion \{
.	       \	  struct xxsUnion *	xxGlobalRecoverySet;
.	       \	  unsigned short	xxLocalRecoverySet;
.	       \	\} xxtUnion, * xxtUnionPtr;
.		typedef unsigned int xxtbitset;
.		typedef	xxtbitset xxtSet [{n MaxCode () DIV cBitsPerLong + 1}];
.
.		{i ParserName}_tParsAttribute	{i ParserName}_ParsAttribute;
.
.		static short	xxToken;
.		static int	xxErrorCount;
.		static xxbool	xxIsRepairMode = xxfalse;
		IF vMaxRecSetIndex = cNoIndex THEN
.		static xxtbitset xxHorizontalSet [] = \{ 0 \};
		ELSE
.		static xxtbitset xxHorizontalSet [] [{n MaxCode () DIV cBitsPerLong + 1}] = \{
		WriteRecSets;
.		\};
		END;
.		static unsigned char xxVerticalSet [] = \{\
		FOR i := 0 TO vMaxSetIndex DIV cBitsPerChar DO
		  WriteVerticalSet (i);
		END;
.		\};

.		char *		{i ParserName}_TokenName [] = \{
		FOR i := 0 TO MaxCode () DO
		  id := Term (i);
		  IF id # NoIdent THEN
		    GetString (Codes.String (i), s);
.		    "\
		    c := Char (s, 1);
		    IF (c = '"') OR (c = "'") THEN
		      FOR j := 2 TO Length (s) - 1 DO
		        c := Char (s, j);
		        IF (c = '\') OR (c = '"') THEN WriteC (file, '\'); END;
		        WriteC (file, c);
		      END;
		    ELSE
		      FOR j := 1 TO Length (s) DO
		        c := Char (s, j);
		        IF (c = '\') OR (c = '"') THEN WriteC (file, '\'); END;
		        WriteC (file, c);
		      END;
		    END;
.		    ",
		  ELSE
.		    0,
		  END;
		END;
.		\};
.
		CodeForward (Rules);
.
.		static void Begin{i ParserName} ARGS ((void))
.		\{
		CodeBegin (sections);
.		\}
.
.		void Close{i ParserName} ARGS ((void))
.		\{
		CodeClose (sections);
.		\}
.
.		static xxbool xxIsElement
.		# ifdef HAVE_ARGS
.		(xxtSet xySet, short xxElement)
.		# else
.		(xySet, xxElement) xxtSet xySet; short xxElement;
.		# endif
.		\{ return (int) (xySet [xxElement / {n cBitsPerLong}] << xxElement % {n cBitsPerLong}) < 0; \}
.
.		static void xxSkipTokens
.		# ifdef HAVE_ARGS
.		(unsigned short xxLocalRecoverySet, xxtUnionPtr xxGlobalRecoverySet)
.		# else
.		(xxLocalRecoverySet, xxGlobalRecoverySet)
.		unsigned short	xxLocalRecoverySet;
.		xxtUnionPtr	xxGlobalRecoverySet;
.		# endif
.		\{
.	       \  xxbool xxTokensSkipped = xxfalse;
.	       \  xxtSet xxRecoverySet;
		FOR i := 0 TO MaxCode () DIV cBitsPerLong DO
.	       \  xxRecoverySet [{n i}] = xxHorizontalSet [xxLocalRecoverySet] [{n i}];
		END;
.	       \  xxRecoverySet [0] |= (xxtbitset) 0x80000000L; /* INCL (xxRecoverySet [0], xxEof); */
.	       \  while (xxGlobalRecoverySet != (xxtUnionPtr) 0L) \{
		FOR i := 0 TO MaxCode () DIV cBitsPerLong DO
.	       \    xxRecoverySet [{n i}] |= xxHorizontalSet [xxGlobalRecoverySet->xxLocalRecoverySet] [{n i}];
		END;
.	       \    xxGlobalRecoverySet = xxGlobalRecoverySet->xxGlobalRecoverySet;
.	       \  \}
.	       \  while (! xxIsElement (xxRecoverySet, xxToken)) \{
.	       \    xxToken = \
		Prefix;
.		     GetToken (); xxTokensSkipped = xxtrue;
.	       \  \}
.	       \  if (xxTokensSkipped) ErrorMessage (xxRestartPoint, xxInformation, \
		Prefix;
.		   Attribute.Position);
.	       \  xxIsRepairMode = xxtrue;
.		\}
.
.		static void xxReportError ARGS ((void))
.		\{
.	       \  int xxLength = 0;
.	       \  char xxTokenString [256];
.	       \  xxErrorCount ++;
.	       \  ErrorMessage (xxSyntaxError, xxError, \
		Prefix;
.		   Attribute.Position);

.	       \  strcpy (xxTokenString, {i ParserName}_TokenName [xxToken]);
.		# ifdef SPELLING
.	       \  if (strncmp (xxTokenString, \
		Prefix;
.		      TokenPtr, \
		Prefix;
.		      TokenLength)) \{
.. % WriteS (file, "%");
.	       \    xxTokenString [yyLength = strlen (xxTokenString)] = ' ';
.. % WriteS (file, '%');
.	       \    \
		Prefix;
.		    GetWord (& xxTokenString [++ yyLength]);
.	       \  \}
.		# endif
.	       \  ErrorMessageI (xxTokenFound, xxInformation, \
		Prefix;
.		   Attribute.Position, xxString, xxTokenString);
.		\}
.
.		static void xxUnexpected
.		# ifdef HAVE_ARGS
.		(unsigned short xxLocalRecoverySet, xxtUnionPtr xxGlobalRecoverySet)
.		# else
.		(xxLocalRecoverySet, xxGlobalRecoverySet)
.		unsigned short	xxLocalRecoverySet;
.		xxtUnionPtr	xxGlobalRecoverySet;
.		# endif
.		\{
.	       \  if (! xxIsRepairMode) \{
.	       \    xxReportError ();
.	       \    xxSkipTokens (xxLocalRecoverySet, xxGlobalRecoverySet);
.	       \  \}
.		\}
.
.		static void xxExpected
.		# ifdef HAVE_ARGS
.		(unsigned short xxExpectedSet, unsigned short xxLocalRecoverySet, xxtUnionPtr xxGlobalRecoverySet)
.		# else
.		(xxExpectedSet, xxLocalRecoverySet, xxGlobalRecoverySet)
.		unsigned short	xxExpectedSet, xxLocalRecoverySet;
.		xxtUnionPtr	xxGlobalRecoverySet;
.		# endif
.		\{
.	       \  if (! xxIsRepairMode) \{
.	       \    short yxToken;
.	       \    int xxLength = 0;
.	       \    char xxContinueString [5000];
.	       \    xxReportError ();
.. % WriteS (file, "%");
.	       \    xxContinueString [0] = '\\0';
.. % WriteS (file, '%');
.	       \    for (yxToken = 0; yxToken <= {n MaxCode ()}; yxToken ++)
.	       \      if (xxIsElement (xxHorizontalSet [xxExpectedSet], yxToken)) \{
.	       \	char * xxTokenString = {i ParserName}_TokenName [yxToken];
.	       \	if ((xxLength += strlen (xxTokenString) + 1) >= 5000) break;
.	       \	strcat (xxContinueString, xxTokenString);
.	       \	strcat (xxContinueString, " ");
.	       \      \}
.	       \    ErrorMessageI (xxExpectedTokens, xxInformation, \
		Prefix;
.		     Attribute.Position, xxString, xxContinueString);
.	       \    xxSkipTokens (xxLocalRecoverySet, xxGlobalRecoverySet);
.	       \  \}
.		\}
.
.		static void xxRecoveryLiteral
.		# ifdef HAVE_ARGS
.		(short xxExpected, unsigned short xxLocalRecoverySet, xxtUnionPtr xxGlobalRecoverySet)
.		# else
.		(xxExpected, xxLocalRecoverySet, xxGlobalRecoverySet)
.		short		xxExpected;
.		unsigned short	xxLocalRecoverySet;
.		xxtUnionPtr	xxGlobalRecoverySet;
.		# endif
.		\{
.	       \  if (! xxIsRepairMode) \{
.	       \    xxReportError ();
.	       \    ErrorMessageI (xxExpectedTokens, xxInformation, \
		Prefix;
.		     Attribute.Position, xxString, {i ParserName}_TokenName [xxExpected]);
.	       \    xxSkipTokens (xxLocalRecoverySet, xxGlobalRecoverySet);
.	       \  \}
.	       \  if (xxToken != xxExpected) \{
.	       \    ErrorMessageI (xxTokenInserted, xxRepair, \
		Prefix;
.		     Attribute.Position, xxString, {i ParserName}_TokenName [xxExpected]);
.	       \  \} else \{
.	       \    if (xxToken != xxEof) xxToken = \
		Prefix;
.		     GetToken ();
.	       \    xxIsRepairMode = xxfalse;
.	       \  \}
.		\}
.
.		static void xxRecoveryTerminal
.		# ifdef HAVE_ARGS
.		(short xxExpected, unsigned short xxLocalRecoverySet,
.		xxtUnionPtr xxGlobalRecoverySet, \
		Prefix;
.		   tScanAttribute * xxRepairAttribute)
.		# else
.		(xxExpected, xxLocalRecoverySet, xxGlobalRecoverySet, xxRepairAttribute)
.		short		xxExpected;
.		unsigned short	xxLocalRecoverySet;
.		xxtUnionPtr	xxGlobalRecoverySet;
		Prefix;
.		   tScanAttribute	* xxRepairAttribute;
.		# endif
.		\{
.	       \  if (! xxIsRepairMode) \{
.	       \    xxReportError ();
.	       \    ErrorMessageI (xxExpectedTokens, xxInformation, \
		Prefix;
.		     Attribute.Position, xxString, {i ParserName}_TokenName [xxExpected]);
.	       \    xxSkipTokens (xxLocalRecoverySet, xxGlobalRecoverySet);
.	       \  \}
.	       \  if (xxToken != xxExpected) \{
.	       \    ErrorMessageI (xxTokenInserted, xxRepair, \
		Prefix;
.		     Attribute.Position, xxString, {i ParserName}_TokenName [xxExpected]);
.	       \    \
		Prefix;
.		   ErrorAttribute ((int) xxExpected, xxRepairAttribute);
.	       \  \} else \{
.	       \    * xxRepairAttribute = \
		Prefix;
.		     Attribute;
.	       \    if (xxToken != xxEof) xxToken = \
		Prefix;
.		     GetToken ();
.	       \    xxIsRepairMode = xxfalse;
.	       \  \}
.		\}
.
.		int {i ParserName} ARGS ((void))
.		\{
.	       \  xxErrorCount = 0;
.	       \  Begin{i ParserName} ();
.	       \  xxToken = \
		Prefix;
.		   GetToken ();
.	       \  yy{i Id.ident} (& {i ParserName}_ParsAttribute, (xxtUnionPtr) 0L);
.	       \  if (xxToken != xxEof) xxRecoveryLiteral (xxEof, 0, (xxtUnionPtr) 0L);
.	       \  return xxErrorCount;
.		\}
.
		NumberArraySize := MaxId + 1;
		MaxNumberArraySize := MaxId + 1;
		MakeArray (NumberArray, NumberArraySize, TSIZE (INTEGER));
		MakeArray (MaxNumberArray, MaxNumberArraySize, TSIZE (INTEGER));
		CodeRules (Rules);
		ReleaseArray (NumberArray, NumberArraySize, TSIZE (INTEGER));
		ReleaseArray (MaxNumberArray, MaxNumberArraySize, TSIZE (INTEGER));

		WriteClose (file);
		}

  Grammar	(sections, tokens, Rules0 ())
		{
		Message ('CodeC.ESTRA: no rules', Error, NoPosition);
		}


/*
 *	generate forward declarations
 */

FUNCTION	CodeForward		/rules/

  Rules0	() {}

  Rules		(Rule (Id (), codes, expr), rules)
		{
.		static void yy{i Id.ident} ARGS(({i ParserName}_tParsAttribute * {i Id.ident}0, xxtUnionPtr xxGlobalRecoverySet));
		CodeForward (rules);
		}

/*
 *	generate recursive descent procedure
 */

FUNCTION	CodeRules		/rules, expr/

  Rules0	() {}

  Rules		(Rule (Id (), codes, expr), rules)
		{
		ClearArray (MaxNumberArray^);
		SetNumbers (expr, TRUE);

.		static void yy{i Id.ident}
.		# ifdef HAVE_ARGS
.		({i ParserName}_tParsAttribute * {i Id.ident}0, xxtUnionPtr xxGlobalRecoverySet)
.		# else
.		({i Id.ident}0, xxGlobalRecoverySet)
.		{i ParserName}_tParsAttribute	* {i Id.ident}0;
.		xxtUnionPtr	xxGlobalRecoverySet;
.		# endif
.		/* {i Id.ident} : \
		Print (expr);
.		\ . */
.		\{
.+
		  WriteAttributes;
		  IF Rule.iscalling THEN
.		    xxtUnion xxUnion;
		  END;
		  CodeLocal (lSections);
		  CodeCodes (codes);
		  IF Rule.iscalling THEN
.		    xxUnion.xxGlobalRecoverySet = xxGlobalRecoverySet;
		  END;
		  CodeRules (expr);
.-
.		\}
.
		CodeRules (rules);
		}

  Option	(expr)
		{
.		for (;;) \{
.+
.		  if (\
		    CodeIsElement (Option.index, expr.first);
.		    ) \{
.+
		    InDefault := FALSE;
		    CodeRules (expr);
.		    break;
.-
.		  \} else if (\
		    CodeIsElement (Option.followindex, Option.follow);
.		  \ || xxIsRepairMode) break;
		  CodeRecovery (Option.recindex, Option.expindex);
.-
.		\}
		}

  Times		(expr)
		{
.		for (;;) \{
.+
.		  if (\
		      CodeIsElement (Times.index, expr.first);
.		      ) \{
.+
		    InDefault := FALSE;
		    CodeRules (expr);
.-
.		  \} else if (\
		    CodeIsElement (Times.followindex, Times.follow);
.		  \ || xxIsRepairMode) break;
.		  else
.+
		    CodeRecovery (Times.recindex, Times.expindex);
.-
.-
.		\}
		}

  Plus		(expr)
		{
.		for (;;) \{
.+
		  CodeRules (expr);
.		  if (! (\
		       CodeIsElement (Plus.index, expr.first);
.		       )) \{
.+
.		    if (\
		      CodeIsElement (Plus.followindex, Plus.follow);
.		      ) break;
		    CodeRecovery (Plus.recindex, Plus.expindex);
.		    if (! (\
		      CodeIsElement (Plus.index, Plus.first);
.		      )) break;
.-
.		  \}
.-
.		\}
		}

  List		(body: expr, sep: expr)
		{
.		for (;;) \{
.+
		  CodeRules (body);
.		  if (! (\
		    CodeIsElement (sep.index, sep.first);
.			 )) \{
.+
.		    if (\
		      CodeIsElement (List.followindex, List.follow);
.		      ) break;
		    CodeRecovery (List.recindex, List.expindex);
.		    if (! (\
		      CodeIsElement (sep.index, sep.first);
.		    \ || \
		      CodeIsElement (List.index, List.first);
.		      )) break;
.-
.		  \}
		  CodeRules (sep);
.-
.		\}
		}

  Action	(Codes0 ()) {}

  Action	(codes) { CodeCodes (codes); }

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & Leaf.sure & NOT Id.isstring }
		{
		IF InDefault THEN
.		  if (xxToken != {c Id.ident} /* {i Id.ident} */)
.	         \  xxRecoveryTerminal ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet, & {i Id.ident}{n Leaf.number});\
		  IF FALSE THEN
.		    /* {R Leaf.recindex} */
		  ELSE
.$
		  END;
.		  else \{
.	         \  {i Id.ident}{n Leaf.number} = \
		  Prefix;
.		     Attribute;
.	         \  xxToken = \
		  Prefix;
.		     GetToken (); xxIsRepairMode = xxfalse;
.		  \}
		  InDefault := FALSE;
		ELSE
.		  {i Id.ident}{n Leaf.number} = \
		  Prefix;
.		   Attribute;
.		  xxToken = \
		  Prefix;
.		   GetToken (); xxIsRepairMode = xxfalse;
		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & Leaf.sure & Id.isstring }
		{
		IF InDefault THEN
.		  if (xxToken != {c Id.ident} /* {t Id.ident} */)
.	         \  xxRecoveryLiteral ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet);\
		  IF FALSE THEN
.		    /* {R Leaf.recindex} */
		  ELSE
.$
		  END;
.		  else \{
.	         \  xxToken = \
		  Prefix;
.		     GetToken (); xxIsRepairMode = xxfalse;
.		  \}
		  InDefault := FALSE;
		ELSE
.		  xxToken = \
		  Prefix;
.		   GetToken (); xxIsRepairMode = xxfalse;
		END;
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & NOT Leaf.sure & NOT Id.isstring }
		{
.		if (xxToken != {c Id.ident} /* {i Id.ident} */)
.	       \  xxRecoveryTerminal ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet, & {i Id.ident}{n Leaf.number});\
		  IF FALSE THEN
.		    /* {R Leaf.recindex} */
		  ELSE
.$
		  END;
.		else \{
.	       \  {i Id.ident}{n Leaf.number} = \
		  Prefix;
.		   Attribute;
.	       \  xxToken = \
		  Prefix;
.		   GetToken (); xxIsRepairMode = xxfalse;
.		\}
		}

  Leaf		(Id ())
		CONDITION	{ IsTerm (Id.ident) & NOT Leaf.sure & Id.isstring }
		{
.		if (xxToken != {c Id.ident} /* {t Id.ident} */)
.	       \  xxRecoveryLiteral ({c Id.ident}, {n Leaf.recindex}, xxGlobalRecoverySet);\
		  IF FALSE THEN
.		    /* {R Leaf.recindex} */
		  ELSE
.$
		  END;
.		else \{
.	       \  xxToken = \
		  Prefix;
.		   GetToken (); xxIsRepairMode = xxfalse;
.		\}
		}

  Leaf		(Id ())
		CONDITION	{ IsNonterm (Id.ident) }
		{
.		xxUnion.xxLocalRecoverySet = {n Leaf.recindex}; yy{i Id.ident} (& {i Id.ident}{n Leaf.number}, & xxUnion);\
		  IF FALSE THEN
.		    /* {R Leaf.recindex} */
		  ELSE
.$
		  END;
		}

  Sequence0	() {}

  Sequence	(expr, sequence)
		{
		CodeRules (expr);
		CodeRules (sequence);
		}

  alternative	CONDITION	{ alternative.case }
		DECLARE { VAR label: INTEGER; labels: tSet; }
		{
		MakeSet (labels, MaxId);
.		for (;;) \{
.+
.		  switch (xxToken) \{
		  INC (Label);
		  label := Label;
		  CodeAltCase (alternative, label, labels);
.		  \}
.-
.		\}
.		xx{n label}:;
		ReleaseSet (labels);
		}

  alternative	CONDITION	{ NOT alternative.case }
		{
		CodeAltIf (alternative, FALSE);
		}


FUNCTION	CodeAltCase	label: INTEGER; labels: tSet ->	/ alternative /

  Alternative0	()
/*		DECLARE { VAR l: CARDINAL; s: tSet; } */
		{
(*
		MakeSet (s, MaxCode ());
		FOR l := Minimum (labels) TO Maximum (labels) DO
		  IF IsElement (l, labels) THEN
		    Include (s, Code (l));
		  END;
		END;
		FOR l := Minimum (s) TO Maximum (s) DO
		  IF NOT IsElement (l, s) THEN
.		    case {n l}:;
		  END;
		END;
*)
.		default:
.+
.		  if (xxIsRepairMode) \{
.+
		    InDefault := TRUE;
		    CodeRules (Alternative0.default);
		    InDefault := FALSE;
.		    goto xx{n label};
.-
.		  \}
		  CodeRecovery (Alternative0.recindex, Alternative0.expindex);
.-
		}

  Alternative	(expr, alternative)
		{
		WriteLabels (expr.fifo);
.+
		CodeRules (expr);
.		goto xx{n label};
.-
		Union (labels, expr.fifo);
		CodeAltCase (alternative, label, labels);
		}


FUNCTION	CodeAltIf	started: BOOLEAN ->	/ alternative /

  Alternative0	()
		{
.		\} else \{
.+
		  CodeRecovery (Alternative0.recindex, Alternative0.expindex);
		  InDefault := TRUE;
		  CodeRules (Alternative0.default);
		  InDefault := FALSE;
.-
.		\}
		}

  Alternative	(expr, Alternative0 ())
		{
		IF NOT started THEN
.		  if (\
	            CodeIsElement (Alternative.index, expr.first);
.	            ) \{
		ELSE
.		  \} else \{
		END;
.+
		CodeRules (expr);
.-
.		\}
		}

  Alternative	(expr, alternative)
		{
		IF NOT started THEN
.		  if (\
		ELSE
.		  \} else if (\
		END;
	        CodeIsElement (Alternative.index, expr.fifo);
.	        ) \{
.+
		CodeRules (expr);
.-
		CodeAltIf (alternative, TRUE);
		}


/*
 *	set numbers for attribute access
 */

FUNCTION	SetNumbers	start: BOOLEAN	->	/expr/

Option		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

Times		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

Plus		(expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		}

List		(body: expr, sep: expr)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (body, FALSE);
		SetNumbers (sep, FALSE);
		}

Action		(codes) {}

Sequence0	() {}

Sequence	(expr, sequence)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		SetNumbers (sequence, FALSE);
		}

Alternative0	() { }

Alternative	(expr, alternative)
		{
		IF start THEN ClearArray (NumberArray^); END;
		SetNumbers (expr, FALSE);
		SetNumbers (alternative, start);
		}

Leaf		(Id ())
		CONDITION	{ Id.isstring }
		{
		Leaf.number := 0;
		}

Leaf		(Id ())
		CONDITION	{ NOT Id.isstring }
		{
		IF start THEN ClearArray (NumberArray^); END;
		Leaf.number := NumberArray^ [Id.ident] + 1;
		NumberArray^ [Id.ident] := Leaf.number;
		IF Leaf.number > MaxNumberArray^ [Id.ident] THEN
		  MaxNumberArray^ [Id.ident] := Leaf.number;
		END;
		}


/*
 *		common functions
 */

FUNCTION	CodeExport		/ sections /


Sections	(Export (codes), sections)
		{
		vExport := TRUE;
		CodeCodes (codes);
		CodeExport (sections);
		}

Sections	(section, sections)
		CONDITION { section^.Kind # Tree.Export }
		{
		CodeExport (sections);
		}

Sections0	() {}


FUNCTION	CodeGlobal		/ sections /


Sections	(Global (codes), sections)
		{
		CodeCodes (codes);
		CodeGlobal (sections);
		}

Sections	(section, sections)
		CONDITION { section^.Kind # Tree.Global }
		{
		CodeGlobal (sections);
		}

Sections0	() {}


FUNCTION	CodeLocal		/ sections /


Sections	(Local (codes), sections)
		{
		CodeCodes (codes);
		CodeLocal (sections);
		}

Sections	(section, sections)
		CONDITION { section^.Kind # Tree.Local }
		{
		CodeLocal (sections);
		}

Sections0	() {}


FUNCTION	CodeBegin		/ sections /


Sections	(Begin (codes), sections)
		{
		CodeCodes (codes);
		CodeBegin (sections);
		}

Sections	(section, sections)
		CONDITION { section^.Kind # Tree.Begin }
		{
		CodeBegin (sections);
		}

Sections0	() {}


FUNCTION	CodeClose		/ sections /


Sections	(Close (codes), sections)
		{
		CodeCodes (codes);
		CodeClose (sections);
		}

Sections	(section, sections)
		CONDITION { section^.Kind # Tree.Close }
		{
		CodeClose (sections);
		}

Sections0	() {}


FUNCTION	CodeCodes		/ codes /

Codes		(Code (), codes)
		{
.. ^
		IF LINE THEN
.		   # line {n Code.pos.Line} "{e Code.pos.File}"
		ELSE
.		   /* line {n Code.pos.Line} "{i Code.pos.File}" */
		END;
		WriteString (file, Code.ref);
		CodeCodes2 (codes);
.
.. ^ Spaces;
		}

Codes0		() {}


FUNCTION	CodeCodes2		/ codes /

Codes		(Code (), codes)
		{
		WriteString (file, Code.ref);
		CodeCodes2 (codes);
		}

Codes0		() {}

/*
 *	print grammar rule
 */

FUNCTION	Print			/ expr /

Option		(expr)
		{
.		[\
		Print (expr);
.		]\
		}

Times		(expr)
		{
		PrintParent2 (expr);
.		\ *\
		}

Plus		(expr)
		{
		PrintParent2 (expr);
.		\ +\
		}

List		(body: expr, sep: expr)
		{
		PrintParent2 (body);
.		\ || \
		PrintParent2 (sep);
		}

Action		(codes) {}

Leaf		(Id ())
		{
		IF Id.isstring THEN
		   WriteTerminal (file, Id.ident);
		ELSE
.		   {i Id.ident}\
		END;
		}

Alternative0	() {}

Alternative	(expr, Alternative0 ())
		{
		Print (expr);
		}

Alternative	(expr, alternative)
		{
		Print (expr);
.
.		\   | \
		Print (alternative);
		}

Sequence0	() {}

Sequence	(expr, sequence)
		{
.		\ \
		PrintParent1 (expr);
		Print (sequence);
		}

FUNCTION	PrintParent1		/ expr /

alternative
		{
.		(\
		Print (alternative);
.		)\
		}

expr
		{
		Print (expr);
		}

FUNCTION	PrintParent2		/ expr /

alternative
		{
.		(\
		Print (alternative);
.		)\
		}

sequence
		{
.		(\
		Print (sequence);
.		)\
		}

expr
		{
		Print (expr);
		}
